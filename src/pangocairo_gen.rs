/* automatically generated by rust-bindgen */

use cairo::{cairo_t};
use pango::PangoLayout;

// #![allow(non_camel_case_types,
//          non_upper_case_globals,
//          non_snake_case)]
// pub type ptrdiff_t = isize;
// pub type size_t = usize;
// pub type wchar_t = ::std::os::raw::c_int;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct max_align_t {
//     pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
//     pub __clang_max_align_nonce2: ::std::os::raw::c_double,
// }
// impl ::std::default::Default for max_align_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type gint8 = ::std::os::raw::c_char;
// pub type guint8 = ::std::os::raw::c_uchar;
// pub type gint16 = ::std::os::raw::c_short;
// pub type guint16 = ::std::os::raw::c_ushort;
// pub type gint32 = ::std::os::raw::c_int;
// pub type guint32 = ::std::os::raw::c_uint;
// pub type gint64 = ::std::os::raw::c_long;
// pub type guint64 = ::std::os::raw::c_ulong;
// pub type gssize = ::std::os::raw::c_long;
// pub type gsize = ::std::os::raw::c_ulong;
// pub type goffset = gint64;
// pub type gintptr = ::std::os::raw::c_long;
// pub type guintptr = ::std::os::raw::c_ulong;
// pub type GPid = ::std::os::raw::c_int;
// pub type __u_char = ::std::os::raw::c_uchar;
// pub type __u_short = ::std::os::raw::c_ushort;
// pub type __u_int = ::std::os::raw::c_uint;
// pub type __u_long = ::std::os::raw::c_ulong;
// pub type __int8_t = ::std::os::raw::c_char;
// pub type __uint8_t = ::std::os::raw::c_uchar;
// pub type __int16_t = ::std::os::raw::c_short;
// pub type __uint16_t = ::std::os::raw::c_ushort;
// pub type __int32_t = ::std::os::raw::c_int;
// pub type __uint32_t = ::std::os::raw::c_uint;
// pub type __int64_t = ::std::os::raw::c_long;
// pub type __uint64_t = ::std::os::raw::c_ulong;
// pub type __quad_t = ::std::os::raw::c_long;
// pub type __u_quad_t = ::std::os::raw::c_ulong;
// pub type __dev_t = ::std::os::raw::c_ulong;
// pub type __uid_t = ::std::os::raw::c_uint;
// pub type __gid_t = ::std::os::raw::c_uint;
// pub type __ino_t = ::std::os::raw::c_ulong;
// pub type __ino64_t = ::std::os::raw::c_ulong;
// pub type __mode_t = ::std::os::raw::c_uint;
// pub type __nlink_t = ::std::os::raw::c_ulong;
// pub type __off_t = ::std::os::raw::c_long;
// pub type __off64_t = ::std::os::raw::c_long;
// pub type __pid_t = ::std::os::raw::c_int;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct __fsid_t {
//     pub __val: [::std::os::raw::c_int; 2usize],
// }
// impl ::std::default::Default for __fsid_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type __clock_t = ::std::os::raw::c_long;
// pub type __rlim_t = ::std::os::raw::c_ulong;
// pub type __rlim64_t = ::std::os::raw::c_ulong;
// pub type __id_t = ::std::os::raw::c_uint;
// pub type __time_t = ::std::os::raw::c_long;
// pub type __useconds_t = ::std::os::raw::c_uint;
// pub type __suseconds_t = ::std::os::raw::c_long;
// pub type __daddr_t = ::std::os::raw::c_int;
// pub type __key_t = ::std::os::raw::c_int;
// pub type __clockid_t = ::std::os::raw::c_int;
// pub type __timer_t = *mut ::std::os::raw::c_void;
// pub type __blksize_t = ::std::os::raw::c_long;
// pub type __blkcnt_t = ::std::os::raw::c_long;
// pub type __blkcnt64_t = ::std::os::raw::c_long;
// pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
// pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
// pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
// pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
// pub type __fsword_t = ::std::os::raw::c_long;
// pub type __ssize_t = ::std::os::raw::c_long;
// pub type __syscall_slong_t = ::std::os::raw::c_long;
// pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
// pub type __loff_t = __off64_t;
// pub type __qaddr_t = *mut __quad_t;
// pub type __caddr_t = *mut ::std::os::raw::c_char;
// pub type __intptr_t = ::std::os::raw::c_long;
// pub type __socklen_t = ::std::os::raw::c_uint;
// pub type clock_t = __clock_t;
// pub type time_t = __time_t;
// pub type clockid_t = __clockid_t;
// pub type timer_t = __timer_t;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct timespec {
//     pub tv_sec: __time_t,
//     pub tv_nsec: __syscall_slong_t,
// }
// impl ::std::default::Default for timespec {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct tm {
//     pub tm_sec: ::std::os::raw::c_int,
//     pub tm_min: ::std::os::raw::c_int,
//     pub tm_hour: ::std::os::raw::c_int,
//     pub tm_mday: ::std::os::raw::c_int,
//     pub tm_mon: ::std::os::raw::c_int,
//     pub tm_year: ::std::os::raw::c_int,
//     pub tm_wday: ::std::os::raw::c_int,
//     pub tm_yday: ::std::os::raw::c_int,
//     pub tm_isdst: ::std::os::raw::c_int,
//     pub tm_gmtoff: ::std::os::raw::c_long,
//     pub tm_zone: *const ::std::os::raw::c_char,
// }
// impl ::std::default::Default for tm {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct itimerspec {
//     pub it_interval: timespec,
//     pub it_value: timespec,
// }
// impl ::std::default::Default for itimerspec {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type pid_t = __pid_t;
// pub enum __locale_data { }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct __locale_struct {
//     pub __locales: [*mut __locale_data; 13usize],
//     pub __ctype_b: *const ::std::os::raw::c_ushort,
//     pub __ctype_tolower: *const ::std::os::raw::c_int,
//     pub __ctype_toupper: *const ::std::os::raw::c_int,
//     pub __names: [*const ::std::os::raw::c_char; 13usize],
// }
// impl ::std::default::Default for __locale_struct {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type __locale_t = *mut __locale_struct;
// pub type locale_t = __locale_t;
// pub type gchar = ::std::os::raw::c_char;
// pub type gshort = ::std::os::raw::c_short;
// pub type glong = ::std::os::raw::c_long;
// pub type gint = ::std::os::raw::c_int;
// pub type gboolean = gint;
// pub type guchar = ::std::os::raw::c_uchar;
// pub type gushort = ::std::os::raw::c_ushort;
// pub type gulong = ::std::os::raw::c_ulong;
// pub type guint = ::std::os::raw::c_uint;
// pub type gfloat = ::std::os::raw::c_float;
// pub type gdouble = ::std::os::raw::c_double;
// pub type gpointer = *mut ::std::os::raw::c_void;
// pub type gconstpointer = *const ::std::os::raw::c_void;
// pub type GCompareFunc =
//     ::std::option::Option<extern "C" fn(a: gconstpointer, b: gconstpointer)
//                               -> gint>;
// pub type GCompareDataFunc =
//     ::std::option::Option<extern "C" fn(a: gconstpointer, b: gconstpointer,
//                                         user_data: gpointer) -> gint>;
// pub type GEqualFunc =
//     ::std::option::Option<extern "C" fn(a: gconstpointer, b: gconstpointer)
//                               -> gboolean>;
// pub type GDestroyNotify =
//     ::std::option::Option<extern "C" fn(data: gpointer)>;
// pub type GFunc =
//     ::std::option::Option<extern "C" fn(data: gpointer, user_data: gpointer)>;
// pub type GHashFunc =
//     ::std::option::Option<extern "C" fn(key: gconstpointer) -> guint>;
// pub type GHFunc =
//     ::std::option::Option<extern "C" fn(key: gpointer, value: gpointer,
//                                         user_data: gpointer)>;
// pub type GFreeFunc = ::std::option::Option<extern "C" fn(data: gpointer)>;
// pub type GTranslateFunc =
//     ::std::option::Option<unsafe extern "C" fn(str: *const gchar,
//                                                data: gpointer)
//                               -> *const gchar>;
// pub type GDoubleIEEE754 = _GDoubleIEEE754;
// pub type GFloatIEEE754 = _GFloatIEEE754;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GFloatIEEE754 {
//     pub _bindgen_data_: [u32; 1usize],
// }
// impl _GFloatIEEE754 {
//     pub unsafe fn v_float(&mut self) -> *mut gfloat {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn mpn(&mut self) -> *mut Struct_Unnamed1 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for _GFloatIEEE754 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed1 {
//     pub _bindgen_bitfield_1_: guint,
//     pub _bindgen_bitfield_2_: guint,
//     pub _bindgen_bitfield_3_: guint,
// }
// impl ::std::default::Default for Struct_Unnamed1 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GDoubleIEEE754 {
//     pub _bindgen_data_: [u64; 1usize],
// }
// impl _GDoubleIEEE754 {
//     pub unsafe fn v_double(&mut self) -> *mut gdouble {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn mpn(&mut self) -> *mut Struct_Unnamed2 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for _GDoubleIEEE754 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed2 {
//     pub _bindgen_bitfield_1_: guint,
//     pub _bindgen_bitfield_2_: guint,
//     pub _bindgen_bitfield_3_: guint,
//     pub _bindgen_bitfield_4_: guint,
// }
// impl ::std::default::Default for Struct_Unnamed2 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GTimeVal = _GTimeVal;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTimeVal {
//     pub tv_sec: glong,
//     pub tv_usec: glong,
// }
// impl ::std::default::Default for _GTimeVal {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _GBytes { }
// pub type GBytes = _GBytes;
// pub type GArray = _GArray;
// pub type GByteArray = _GByteArray;
// pub type GPtrArray = _GPtrArray;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GArray {
//     pub data: *mut gchar,
//     pub len: guint,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GArray {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GByteArray {
//     pub data: *mut guint8,
//     pub len: guint,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GByteArray {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GPtrArray {
//     pub pdata: *mut gpointer,
//     pub len: guint,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GPtrArray {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type va_list = __gnuc_va_list;
// pub type __gnuc_va_list = __builtin_va_list;
// pub type GQuark = guint32;
// pub type GError = _GError;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GError {
//     pub domain: GQuark,
//     pub code: gint,
//     pub message: *mut gchar,
// }
// impl ::std::default::Default for _GError {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GUserDirectory {
//     G_USER_DIRECTORY_DESKTOP = 0,
//     G_USER_DIRECTORY_DOCUMENTS = 1,
//     G_USER_DIRECTORY_DOWNLOAD = 2,
//     G_USER_DIRECTORY_MUSIC = 3,
//     G_USER_DIRECTORY_PICTURES = 4,
//     G_USER_DIRECTORY_PUBLIC_SHARE = 5,
//     G_USER_DIRECTORY_TEMPLATES = 6,
//     G_USER_DIRECTORY_VIDEOS = 7,
//     G_USER_N_DIRECTORIES = 8,
// }
// pub type GDebugKey = _GDebugKey;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GDebugKey {
//     pub key: *const gchar,
//     pub value: guint,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GDebugKey {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GFormatSizeFlags {
//     G_FORMAT_SIZE_DEFAULT = 0,
//     G_FORMAT_SIZE_LONG_FORMAT = 1,
//     G_FORMAT_SIZE_IEC_UNITS = 2,
// }
// pub type GVoidFunc = ::std::option::Option<extern "C" fn()>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GThreadError { G_THREAD_ERROR_AGAIN = 0, }
// pub type GThreadFunc =
//     ::std::option::Option<extern "C" fn(data: gpointer) -> gpointer>;
// pub type GThread = _GThread;
// pub type GMutex = _GMutex;
// pub type GRecMutex = _GRecMutex;
// pub type GRWLock = _GRWLock;
// pub type GCond = _GCond;
// pub type GPrivate = _GPrivate;
// pub type GOnce = _GOnce;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GMutex {
//     pub _bindgen_data_: [u64; 1usize],
// }
// impl _GMutex {
//     pub unsafe fn p(&mut self) -> *mut gpointer {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn i(&mut self) -> *mut [guint; 2usize] {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for _GMutex {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GRWLock {
//     pub p: gpointer,
//     pub i: [guint; 2usize],
// }
// impl ::std::default::Default for _GRWLock {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GCond {
//     pub p: gpointer,
//     pub i: [guint; 2usize],
// }
// impl ::std::default::Default for _GCond {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GRecMutex {
//     pub p: gpointer,
//     pub i: [guint; 2usize],
// }
// impl ::std::default::Default for _GRecMutex {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GPrivate {
//     pub p: gpointer,
//     pub notify: GDestroyNotify,
//     pub future: [gpointer; 2usize],
// }
// impl ::std::default::Default for _GPrivate {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GOnceStatus {
//     G_ONCE_STATUS_NOTCALLED = 0,
//     G_ONCE_STATUS_PROGRESS = 1,
//     G_ONCE_STATUS_READY = 2,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GOnce {
//     pub status: GOnceStatus,
//     pub retval: gpointer,
// }
// impl ::std::default::Default for _GOnce {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GMutexLocker = ::std::os::raw::c_void;
// pub enum _GAsyncQueue { }
// pub type GAsyncQueue = _GAsyncQueue;
// pub type __sig_atomic_t = ::std::os::raw::c_int;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct __sigset_t {
//     pub __val: [::std::os::raw::c_ulong; 16usize],
// }
// impl ::std::default::Default for __sigset_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type sig_atomic_t = __sig_atomic_t;
// pub type sigset_t = __sigset_t;
// pub type uid_t = __uid_t;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct sigval {
//     pub _bindgen_data_: [u64; 1usize],
// }
// impl sigval {
//     pub unsafe fn sival_int(&mut self) -> *mut ::std::os::raw::c_int {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for sigval {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type sigval_t = sigval;
// pub type __sigchld_clock_t = __clock_t;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct siginfo_t {
//     pub si_signo: ::std::os::raw::c_int,
//     pub si_errno: ::std::os::raw::c_int,
//     pub si_code: ::std::os::raw::c_int,
//     pub _sifields: Union_Unnamed3,
// }
// impl ::std::default::Default for siginfo_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Union_Unnamed3 {
//     pub _bindgen_data_: [u64; 14usize],
// }
// impl Union_Unnamed3 {
//     pub unsafe fn _pad(&mut self) -> *mut [::std::os::raw::c_int; 28usize] {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn _kill(&mut self) -> *mut Struct_Unnamed4 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn _timer(&mut self) -> *mut Struct_Unnamed5 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn _rt(&mut self) -> *mut Struct_Unnamed6 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn _sigchld(&mut self) -> *mut Struct_Unnamed7 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn _sigfault(&mut self) -> *mut Struct_Unnamed8 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn _sigpoll(&mut self) -> *mut Struct_Unnamed10 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn _sigsys(&mut self) -> *mut Struct_Unnamed11 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for Union_Unnamed3 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed4 {
//     pub si_pid: __pid_t,
//     pub si_uid: __uid_t,
// }
// impl ::std::default::Default for Struct_Unnamed4 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed5 {
//     pub si_tid: ::std::os::raw::c_int,
//     pub si_overrun: ::std::os::raw::c_int,
//     pub si_sigval: sigval_t,
// }
// impl ::std::default::Default for Struct_Unnamed5 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed6 {
//     pub si_pid: __pid_t,
//     pub si_uid: __uid_t,
//     pub si_sigval: sigval_t,
// }
// impl ::std::default::Default for Struct_Unnamed6 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed7 {
//     pub si_pid: __pid_t,
//     pub si_uid: __uid_t,
//     pub si_status: ::std::os::raw::c_int,
//     pub si_utime: __sigchld_clock_t,
//     pub si_stime: __sigchld_clock_t,
// }
// impl ::std::default::Default for Struct_Unnamed7 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed8 {
//     pub si_addr: *mut ::std::os::raw::c_void,
//     pub si_addr_lsb: ::std::os::raw::c_short,
//     pub si_addr_bnd: Struct_Unnamed9,
// }
// impl ::std::default::Default for Struct_Unnamed8 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed9 {
//     pub _lower: *mut ::std::os::raw::c_void,
//     pub _upper: *mut ::std::os::raw::c_void,
// }
// impl ::std::default::Default for Struct_Unnamed9 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed10 {
//     pub si_band: ::std::os::raw::c_long,
//     pub si_fd: ::std::os::raw::c_int,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for Struct_Unnamed10 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed11 {
//     pub _call_addr: *mut ::std::os::raw::c_void,
//     pub _syscall: ::std::os::raw::c_int,
//     pub _arch: ::std::os::raw::c_uint,
// }
// impl ::std::default::Default for Struct_Unnamed11 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(i32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed12 {
//     SI_ASYNCNL = -60,
//     SI_TKILL = -6,
//     SI_SIGIO = -5,
//     SI_ASYNCIO = -4,
//     SI_MESGQ = -3,
//     SI_TIMER = -2,
//     SI_QUEUE = -1,
//     SI_USER = 0,
//     SI_KERNEL = 128,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed13 {
//     ILL_ILLOPC = 1,
//     ILL_ILLOPN = 2,
//     ILL_ILLADR = 3,
//     ILL_ILLTRP = 4,
//     ILL_PRVOPC = 5,
//     ILL_PRVREG = 6,
//     ILL_COPROC = 7,
//     ILL_BADSTK = 8,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed14 {
//     FPE_INTDIV = 1,
//     FPE_INTOVF = 2,
//     FPE_FLTDIV = 3,
//     FPE_FLTOVF = 4,
//     FPE_FLTUND = 5,
//     FPE_FLTRES = 6,
//     FPE_FLTINV = 7,
//     FPE_FLTSUB = 8,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed15 { SEGV_MAPERR = 1, SEGV_ACCERR = 2, }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed16 {
//     BUS_ADRALN = 1,
//     BUS_ADRERR = 2,
//     BUS_OBJERR = 3,
//     BUS_MCEERR_AR = 4,
//     BUS_MCEERR_AO = 5,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed17 {
//     CLD_EXITED = 1,
//     CLD_KILLED = 2,
//     CLD_DUMPED = 3,
//     CLD_TRAPPED = 4,
//     CLD_STOPPED = 5,
//     CLD_CONTINUED = 6,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed18 {
//     POLL_IN = 1,
//     POLL_OUT = 2,
//     POLL_MSG = 3,
//     POLL_ERR = 4,
//     POLL_PRI = 5,
//     POLL_HUP = 6,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct sigevent {
//     pub sigev_value: sigval_t,
//     pub sigev_signo: ::std::os::raw::c_int,
//     pub sigev_notify: ::std::os::raw::c_int,
//     pub _sigev_un: Union_Unnamed19,
// }
// impl ::std::default::Default for sigevent {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Union_Unnamed19 {
//     pub _bindgen_data_: [u64; 6usize],
// }
// impl Union_Unnamed19 {
//     pub unsafe fn _pad(&mut self) -> *mut [::std::os::raw::c_int; 12usize] {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn _tid(&mut self) -> *mut __pid_t {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn _sigev_thread(&mut self) -> *mut Struct_Unnamed20 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for Union_Unnamed19 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed20 {
//     pub _function: ::std::option::Option<extern "C" fn(arg1: sigval_t)>,
//     pub _attribute: *mut pthread_attr_t,
// }
// impl ::std::default::Default for Struct_Unnamed20 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type sigevent_t = sigevent;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed21 {
//     SIGEV_SIGNAL = 0,
//     SIGEV_NONE = 1,
//     SIGEV_THREAD = 2,
//     SIGEV_THREAD_ID = 4,
// }
// pub type __sighandler_t =
//     ::std::option::Option<extern "C" fn(arg1: ::std::os::raw::c_int)>;
// pub type sig_t = __sighandler_t;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct sigaction {
//     pub __sigaction_handler: Union_Unnamed22,
//     pub sa_mask: __sigset_t,
//     pub sa_flags: ::std::os::raw::c_int,
//     pub sa_restorer: ::std::option::Option<extern "C" fn()>,
// }
// impl ::std::default::Default for sigaction {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Union_Unnamed22 {
//     pub _bindgen_data_: [u64; 1usize],
// }
// impl Union_Unnamed22 {
//     pub unsafe fn sa_handler(&mut self) -> *mut __sighandler_t {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn sa_sigaction(&mut self)
//      ->
//          *mut ::std::option::Option<unsafe extern "C" fn(arg1:
//                                                              ::std::os::raw::c_int,
//                                                          arg2: *mut siginfo_t,
//                                                          arg3:
//                                                              *mut ::std::os::raw::c_void)> {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for Union_Unnamed22 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _fpx_sw_bytes {
//     pub magic1: __uint32_t,
//     pub extended_size: __uint32_t,
//     pub xstate_bv: __uint64_t,
//     pub xstate_size: __uint32_t,
//     pub padding: [__uint32_t; 7usize],
// }
// impl ::std::default::Default for _fpx_sw_bytes {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _fpreg {
//     pub significand: [::std::os::raw::c_ushort; 4usize],
//     pub exponent: ::std::os::raw::c_ushort,
// }
// impl ::std::default::Default for _fpreg {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _fpxreg {
//     pub significand: [::std::os::raw::c_ushort; 4usize],
//     pub exponent: ::std::os::raw::c_ushort,
//     pub padding: [::std::os::raw::c_ushort; 3usize],
// }
// impl ::std::default::Default for _fpxreg {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _xmmreg {
//     pub element: [__uint32_t; 4usize],
// }
// impl ::std::default::Default for _xmmreg {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _fpstate {
//     pub cwd: __uint16_t,
//     pub swd: __uint16_t,
//     pub ftw: __uint16_t,
//     pub fop: __uint16_t,
//     pub rip: __uint64_t,
//     pub rdp: __uint64_t,
//     pub mxcsr: __uint32_t,
//     pub mxcr_mask: __uint32_t,
//     pub _st: [_fpxreg; 8usize],
//     pub _xmm: [_xmmreg; 16usize],
//     pub padding: [__uint32_t; 24usize],
// }
// impl ::std::default::Default for _fpstate {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct sigcontext {
//     pub r8: __uint64_t,
//     pub r9: __uint64_t,
//     pub r10: __uint64_t,
//     pub r11: __uint64_t,
//     pub r12: __uint64_t,
//     pub r13: __uint64_t,
//     pub r14: __uint64_t,
//     pub r15: __uint64_t,
//     pub rdi: __uint64_t,
//     pub rsi: __uint64_t,
//     pub rbp: __uint64_t,
//     pub rbx: __uint64_t,
//     pub rdx: __uint64_t,
//     pub rax: __uint64_t,
//     pub rcx: __uint64_t,
//     pub rsp: __uint64_t,
//     pub rip: __uint64_t,
//     pub eflags: __uint64_t,
//     pub cs: ::std::os::raw::c_ushort,
//     pub gs: ::std::os::raw::c_ushort,
//     pub fs: ::std::os::raw::c_ushort,
//     pub __pad0: ::std::os::raw::c_ushort,
//     pub err: __uint64_t,
//     pub trapno: __uint64_t,
//     pub oldmask: __uint64_t,
//     pub cr2: __uint64_t,
//     pub _bindgen_data_1_: [u64; 1usize],
//     pub __reserved1: [__uint64_t; 8usize],
// }
// impl sigcontext {
//     pub unsafe fn fpstate(&mut self) -> *mut *mut _fpstate {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __fpstate_word(&mut self) -> *mut __uint64_t {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for sigcontext {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _xsave_hdr {
//     pub xstate_bv: __uint64_t,
//     pub reserved1: [__uint64_t; 2usize],
//     pub reserved2: [__uint64_t; 5usize],
// }
// impl ::std::default::Default for _xsave_hdr {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy)]
// pub struct _ymmh_state {
//     pub ymmh_space: [__uint32_t; 64usize],
// }
// impl ::std::clone::Clone for _ymmh_state {
//     fn clone(&self) -> Self { *self }
// }
// impl ::std::default::Default for _ymmh_state {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy)]
// pub struct _xstate {
//     pub fpstate: _fpstate,
//     pub xstate_hdr: _xsave_hdr,
//     pub ymmh: _ymmh_state,
// }
// impl ::std::clone::Clone for _xstate {
//     fn clone(&self) -> Self { *self }
// }
// impl ::std::default::Default for _xstate {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct sigstack {
//     pub ss_sp: *mut ::std::os::raw::c_void,
//     pub ss_onstack: ::std::os::raw::c_int,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for sigstack {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed23 { SS_ONSTACK = 1, SS_DISABLE = 2, }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct sigaltstack {
//     pub ss_sp: *mut ::std::os::raw::c_void,
//     pub ss_flags: ::std::os::raw::c_int,
//     pub ss_size: size_t,
// }
// impl ::std::default::Default for sigaltstack {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type stack_t = sigaltstack;
// pub type greg_t = ::std::os::raw::c_longlong;
// pub type gregset_t = [greg_t; 23usize];
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _libc_fpxreg {
//     pub significand: [::std::os::raw::c_ushort; 4usize],
//     pub exponent: ::std::os::raw::c_ushort,
//     pub padding: [::std::os::raw::c_ushort; 3usize],
// }
// impl ::std::default::Default for _libc_fpxreg {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _libc_xmmreg {
//     pub element: [__uint32_t; 4usize],
// }
// impl ::std::default::Default for _libc_xmmreg {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _libc_fpstate {
//     pub cwd: __uint16_t,
//     pub swd: __uint16_t,
//     pub ftw: __uint16_t,
//     pub fop: __uint16_t,
//     pub rip: __uint64_t,
//     pub rdp: __uint64_t,
//     pub mxcsr: __uint32_t,
//     pub mxcr_mask: __uint32_t,
//     pub _st: [_libc_fpxreg; 8usize],
//     pub _xmm: [_libc_xmmreg; 16usize],
//     pub padding: [__uint32_t; 24usize],
// }
// impl ::std::default::Default for _libc_fpstate {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type fpregset_t = *mut _libc_fpstate;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct mcontext_t {
//     pub gregs: gregset_t,
//     pub fpregs: fpregset_t,
//     pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
// }
// impl ::std::default::Default for mcontext_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct ucontext {
//     pub uc_flags: ::std::os::raw::c_ulong,
//     pub uc_link: *mut ucontext,
//     pub uc_stack: stack_t,
//     pub uc_mcontext: mcontext_t,
//     pub uc_sigmask: __sigset_t,
//     pub __fpregs_mem: _libc_fpstate,
// }
// impl ::std::default::Default for ucontext {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type ucontext_t = ucontext;
// pub type pthread_t = ::std::os::raw::c_ulong;
// #[repr(C)]
// #[derive(Copy)]
// pub struct pthread_attr_t {
//     pub _bindgen_data_: [u64; 7usize],
// }
// impl pthread_attr_t {
//     pub unsafe fn __size(&mut self)
//      -> *mut [::std::os::raw::c_char; 56usize] {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::clone::Clone for pthread_attr_t {
//     fn clone(&self) -> Self { *self }
// }
// impl ::std::default::Default for pthread_attr_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct __pthread_internal_list {
//     pub __prev: *mut __pthread_internal_list,
//     pub __next: *mut __pthread_internal_list,
// }
// impl ::std::default::Default for __pthread_internal_list {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type __pthread_list_t = __pthread_internal_list;
// #[repr(C)]
// #[derive(Copy)]
// pub struct pthread_mutex_t {
//     pub _bindgen_data_: [u64; 5usize],
// }
// impl pthread_mutex_t {
//     pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __size(&mut self)
//      -> *mut [::std::os::raw::c_char; 40usize] {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::clone::Clone for pthread_mutex_t {
//     fn clone(&self) -> Self { *self }
// }
// impl ::std::default::Default for pthread_mutex_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct __pthread_mutex_s {
//     pub __lock: ::std::os::raw::c_int,
//     pub __count: ::std::os::raw::c_uint,
//     pub __owner: ::std::os::raw::c_int,
//     pub __nusers: ::std::os::raw::c_uint,
//     pub __kind: ::std::os::raw::c_int,
//     pub __spins: ::std::os::raw::c_short,
//     pub __elision: ::std::os::raw::c_short,
//     pub __list: __pthread_list_t,
// }
// impl ::std::default::Default for __pthread_mutex_s {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct pthread_mutexattr_t {
//     pub _bindgen_data_: [u32; 1usize],
// }
// impl pthread_mutexattr_t {
//     pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for pthread_mutexattr_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy)]
// pub struct pthread_cond_t {
//     pub _bindgen_data_: [u64; 6usize],
// }
// impl pthread_cond_t {
//     pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed24 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __size(&mut self)
//      -> *mut [::std::os::raw::c_char; 48usize] {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::clone::Clone for pthread_cond_t {
//     fn clone(&self) -> Self { *self }
// }
// impl ::std::default::Default for pthread_cond_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed24 {
//     pub __lock: ::std::os::raw::c_int,
//     pub __futex: ::std::os::raw::c_uint,
//     pub __total_seq: ::std::os::raw::c_ulonglong,
//     pub __wakeup_seq: ::std::os::raw::c_ulonglong,
//     pub __woken_seq: ::std::os::raw::c_ulonglong,
//     pub __mutex: *mut ::std::os::raw::c_void,
//     pub __nwaiters: ::std::os::raw::c_uint,
//     pub __broadcast_seq: ::std::os::raw::c_uint,
// }
// impl ::std::default::Default for Struct_Unnamed24 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct pthread_condattr_t {
//     pub _bindgen_data_: [u32; 1usize],
// }
// impl pthread_condattr_t {
//     pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for pthread_condattr_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type pthread_key_t = ::std::os::raw::c_uint;
// pub type pthread_once_t = ::std::os::raw::c_int;
// #[repr(C)]
// #[derive(Copy)]
// pub struct pthread_rwlock_t {
//     pub _bindgen_data_: [u64; 7usize],
// }
// impl pthread_rwlock_t {
//     pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed25 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __size(&mut self)
//      -> *mut [::std::os::raw::c_char; 56usize] {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::clone::Clone for pthread_rwlock_t {
//     fn clone(&self) -> Self { *self }
// }
// impl ::std::default::Default for pthread_rwlock_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed25 {
//     pub __lock: ::std::os::raw::c_int,
//     pub __nr_readers: ::std::os::raw::c_uint,
//     pub __readers_wakeup: ::std::os::raw::c_uint,
//     pub __writer_wakeup: ::std::os::raw::c_uint,
//     pub __nr_readers_queued: ::std::os::raw::c_uint,
//     pub __nr_writers_queued: ::std::os::raw::c_uint,
//     pub __writer: ::std::os::raw::c_int,
//     pub __shared: ::std::os::raw::c_int,
//     pub __rwelision: ::std::os::raw::c_char,
//     pub __pad1: [::std::os::raw::c_uchar; 7usize],
//     pub __pad2: ::std::os::raw::c_ulong,
//     pub __flags: ::std::os::raw::c_uint,
// }
// impl ::std::default::Default for Struct_Unnamed25 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct pthread_rwlockattr_t {
//     pub _bindgen_data_: [u64; 1usize],
// }
// impl pthread_rwlockattr_t {
//     pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for pthread_rwlockattr_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type pthread_spinlock_t = ::std::os::raw::c_int;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct pthread_barrier_t {
//     pub _bindgen_data_: [u64; 4usize],
// }
// impl pthread_barrier_t {
//     pub unsafe fn __size(&mut self)
//      -> *mut [::std::os::raw::c_char; 32usize] {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for pthread_barrier_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct pthread_barrierattr_t {
//     pub _bindgen_data_: [u32; 1usize],
// }
// impl pthread_barrierattr_t {
//     pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for pthread_barrierattr_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GBookmarkFileError {
//     G_BOOKMARK_FILE_ERROR_INVALID_URI = 0,
//     G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1,
//     G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2,
//     G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3,
//     G_BOOKMARK_FILE_ERROR_READ = 4,
//     G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5,
//     G_BOOKMARK_FILE_ERROR_WRITE = 6,
//     G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7,
// }
// pub enum _GBookmarkFile { }
// pub type GBookmarkFile = _GBookmarkFile;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GChecksumType {
//     G_CHECKSUM_MD5 = 0,
//     G_CHECKSUM_SHA1 = 1,
//     G_CHECKSUM_SHA256 = 2,
//     G_CHECKSUM_SHA512 = 3,
// }
// pub enum _GChecksum { }
// pub type GChecksum = _GChecksum;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GConvertError {
//     G_CONVERT_ERROR_NO_CONVERSION = 0,
//     G_CONVERT_ERROR_ILLEGAL_SEQUENCE = 1,
//     G_CONVERT_ERROR_FAILED = 2,
//     G_CONVERT_ERROR_PARTIAL_INPUT = 3,
//     G_CONVERT_ERROR_BAD_URI = 4,
//     G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5,
//     G_CONVERT_ERROR_NO_MEMORY = 6,
// }
// pub enum _GIConv { }
// pub type GIConv = *mut _GIConv;
// pub enum _GData { }
// pub type GData = _GData;
// pub type GDataForeachFunc =
//     ::std::option::Option<extern "C" fn(key_id: GQuark, data: gpointer,
//                                         user_data: gpointer)>;
// pub type GDuplicateFunc =
//     ::std::option::Option<extern "C" fn(data: gpointer, user_data: gpointer)
//                               -> gpointer>;
// pub type GTime = gint32;
// pub type GDateYear = guint16;
// pub type GDateDay = guint8;
// pub type GDate = _GDate;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GDateDMY { G_DATE_DAY = 0, G_DATE_MONTH = 1, G_DATE_YEAR = 2, }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GDateWeekday {
//     G_DATE_BAD_WEEKDAY = 0,
//     G_DATE_MONDAY = 1,
//     G_DATE_TUESDAY = 2,
//     G_DATE_WEDNESDAY = 3,
//     G_DATE_THURSDAY = 4,
//     G_DATE_FRIDAY = 5,
//     G_DATE_SATURDAY = 6,
//     G_DATE_SUNDAY = 7,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GDateMonth {
//     G_DATE_BAD_MONTH = 0,
//     G_DATE_JANUARY = 1,
//     G_DATE_FEBRUARY = 2,
//     G_DATE_MARCH = 3,
//     G_DATE_APRIL = 4,
//     G_DATE_MAY = 5,
//     G_DATE_JUNE = 6,
//     G_DATE_JULY = 7,
//     G_DATE_AUGUST = 8,
//     G_DATE_SEPTEMBER = 9,
//     G_DATE_OCTOBER = 10,
//     G_DATE_NOVEMBER = 11,
//     G_DATE_DECEMBER = 12,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GDate {
//     pub _bindgen_bitfield_1_: guint,
//     pub _bindgen_bitfield_2_: guint,
//     pub _bindgen_bitfield_3_: guint,
//     pub _bindgen_bitfield_4_: guint,
//     pub _bindgen_bitfield_5_: guint,
//     pub _bindgen_bitfield_6_: guint,
// }
// impl ::std::default::Default for _GDate {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _GTimeZone { }
// pub type GTimeZone = _GTimeZone;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GTimeType {
//     G_TIME_TYPE_STANDARD = 0,
//     G_TIME_TYPE_DAYLIGHT = 1,
//     G_TIME_TYPE_UNIVERSAL = 2,
// }
// pub type GTimeSpan = gint64;
// pub enum _GDateTime { }
// pub type GDateTime = _GDateTime;
// #[repr(C)]
// #[derive(Copy)]
// pub struct dirent {
//     pub d_ino: __ino_t,
//     pub d_off: __off_t,
//     pub d_reclen: ::std::os::raw::c_ushort,
//     pub d_type: ::std::os::raw::c_uchar,
//     pub d_name: [::std::os::raw::c_char; 256usize],
// }
// impl ::std::clone::Clone for dirent {
//     fn clone(&self) -> Self { *self }
// }
// impl ::std::default::Default for dirent {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed26 {
//     DT_UNKNOWN = 0,
//     DT_FIFO = 1,
//     DT_CHR = 2,
//     DT_DIR = 4,
//     DT_BLK = 6,
//     DT_REG = 8,
//     DT_LNK = 10,
//     DT_SOCK = 12,
//     DT_WHT = 14,
// }
// pub enum __dirstream { }
// pub type DIR = __dirstream;
// pub enum _GDir { }
// pub type GDir = _GDir;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GFileError {
//     G_FILE_ERROR_EXIST = 0,
//     G_FILE_ERROR_ISDIR = 1,
//     G_FILE_ERROR_ACCES = 2,
//     G_FILE_ERROR_NAMETOOLONG = 3,
//     G_FILE_ERROR_NOENT = 4,
//     G_FILE_ERROR_NOTDIR = 5,
//     G_FILE_ERROR_NXIO = 6,
//     G_FILE_ERROR_NODEV = 7,
//     G_FILE_ERROR_ROFS = 8,
//     G_FILE_ERROR_TXTBSY = 9,
//     G_FILE_ERROR_FAULT = 10,
//     G_FILE_ERROR_LOOP = 11,
//     G_FILE_ERROR_NOSPC = 12,
//     G_FILE_ERROR_NOMEM = 13,
//     G_FILE_ERROR_MFILE = 14,
//     G_FILE_ERROR_NFILE = 15,
//     G_FILE_ERROR_BADF = 16,
//     G_FILE_ERROR_INVAL = 17,
//     G_FILE_ERROR_PIPE = 18,
//     G_FILE_ERROR_AGAIN = 19,
//     G_FILE_ERROR_INTR = 20,
//     G_FILE_ERROR_IO = 21,
//     G_FILE_ERROR_PERM = 22,
//     G_FILE_ERROR_NOSYS = 23,
//     G_FILE_ERROR_FAILED = 24,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GFileTest {
//     G_FILE_TEST_IS_REGULAR = 1,
//     G_FILE_TEST_IS_SYMLINK = 2,
//     G_FILE_TEST_IS_DIR = 4,
//     G_FILE_TEST_IS_EXECUTABLE = 8,
//     G_FILE_TEST_EXISTS = 16,
// }
// pub type GMemVTable = _GMemVTable;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GMemVTable {
//     pub malloc: ::std::option::Option<extern "C" fn(n_bytes: gsize)
//                                           -> gpointer>,
//     pub realloc: ::std::option::Option<extern "C" fn(mem: gpointer,
//                                                      n_bytes: gsize)
//                                            -> gpointer>,
//     pub free: ::std::option::Option<extern "C" fn(mem: gpointer)>,
//     pub calloc: ::std::option::Option<extern "C" fn(n_blocks: gsize,
//                                                     n_block_bytes: gsize)
//                                           -> gpointer>,
//     pub try_malloc: ::std::option::Option<extern "C" fn(n_bytes: gsize)
//                                               -> gpointer>,
//     pub try_realloc: ::std::option::Option<extern "C" fn(mem: gpointer,
//                                                          n_bytes: gsize)
//                                                -> gpointer>,
// }
// impl ::std::default::Default for _GMemVTable {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GNode = _GNode;
// pub const G_TRAVERSE_MASK: GTraverseFlags = GTraverseFlags::G_TRAVERSE_ALL;
// pub const G_TRAVERSE_LEAFS: GTraverseFlags =
//     GTraverseFlags::G_TRAVERSE_LEAVES;
// pub const G_TRAVERSE_NON_LEAFS: GTraverseFlags =
//     GTraverseFlags::G_TRAVERSE_NON_LEAVES;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GTraverseFlags {
//     G_TRAVERSE_LEAVES = 1,
//     G_TRAVERSE_NON_LEAVES = 2,
//     G_TRAVERSE_ALL = 3,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GTraverseType {
//     G_IN_ORDER = 0,
//     G_PRE_ORDER = 1,
//     G_POST_ORDER = 2,
//     G_LEVEL_ORDER = 3,
// }
// pub type GNodeTraverseFunc =
//     ::std::option::Option<unsafe extern "C" fn(node: *mut GNode,
//                                                data: gpointer) -> gboolean>;
// pub type GNodeForeachFunc =
//     ::std::option::Option<unsafe extern "C" fn(node: *mut GNode,
//                                                data: gpointer)>;
// pub type GCopyFunc =
//     ::std::option::Option<extern "C" fn(src: gconstpointer, data: gpointer)
//                               -> gpointer>;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GNode {
//     pub data: gpointer,
//     pub next: *mut GNode,
//     pub prev: *mut GNode,
//     pub parent: *mut GNode,
//     pub children: *mut GNode,
// }
// impl ::std::default::Default for _GNode {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GList = _GList;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GList {
//     pub data: gpointer,
//     pub next: *mut GList,
//     pub prev: *mut GList,
// }
// impl ::std::default::Default for _GList {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _GHashTable { }
// pub type GHashTable = _GHashTable;
// pub type GHRFunc =
//     ::std::option::Option<extern "C" fn(key: gpointer, value: gpointer,
//                                         user_data: gpointer) -> gboolean>;
// pub type GHashTableIter = _GHashTableIter;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GHashTableIter {
//     pub dummy1: gpointer,
//     pub dummy2: gpointer,
//     pub dummy3: gpointer,
//     pub dummy4: ::std::os::raw::c_int,
//     pub dummy5: gboolean,
//     pub dummy6: gpointer,
// }
// impl ::std::default::Default for _GHashTableIter {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _GHmac { }
// pub type GHmac = _GHmac;
// pub type GHook = _GHook;
// pub type GHookList = _GHookList;
// pub type GHookCompareFunc =
//     ::std::option::Option<unsafe extern "C" fn(new_hook: *mut GHook,
//                                                sibling: *mut GHook) -> gint>;
// pub type GHookFindFunc =
//     ::std::option::Option<unsafe extern "C" fn(hook: *mut GHook,
//                                                data: gpointer) -> gboolean>;
// pub type GHookMarshaller =
//     ::std::option::Option<unsafe extern "C" fn(hook: *mut GHook,
//                                                marshal_data: gpointer)>;
// pub type GHookCheckMarshaller =
//     ::std::option::Option<unsafe extern "C" fn(hook: *mut GHook,
//                                                marshal_data: gpointer)
//                               -> gboolean>;
// pub type GHookFunc = ::std::option::Option<extern "C" fn(data: gpointer)>;
// pub type GHookCheckFunc =
//     ::std::option::Option<extern "C" fn(data: gpointer) -> gboolean>;
// pub type GHookFinalizeFunc =
//     ::std::option::Option<unsafe extern "C" fn(hook_list: *mut GHookList,
//                                                hook: *mut GHook)>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GHookFlagMask {
//     G_HOOK_FLAG_ACTIVE = 1,
//     G_HOOK_FLAG_IN_CALL = 2,
//     G_HOOK_FLAG_MASK = 15,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GHookList {
//     pub seq_id: gulong,
//     pub _bindgen_bitfield_1_: guint,
//     pub _bindgen_bitfield_2_: guint,
//     pub hooks: *mut GHook,
//     pub dummy3: gpointer,
//     pub finalize_hook: GHookFinalizeFunc,
//     pub dummy: [gpointer; 2usize],
// }
// impl ::std::default::Default for _GHookList {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GHook {
//     pub data: gpointer,
//     pub next: *mut GHook,
//     pub prev: *mut GHook,
//     pub ref_count: guint,
//     pub hook_id: gulong,
//     pub flags: guint,
//     pub func: gpointer,
//     pub destroy: GDestroyNotify,
// }
// impl ::std::default::Default for _GHook {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GPollFD = _GPollFD;
// pub type GPollFunc =
//     ::std::option::Option<unsafe extern "C" fn(ufds: *mut GPollFD,
//                                                nfsd: guint, timeout_: gint)
//                               -> gint>;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GPollFD {
//     pub fd: gint,
//     pub events: gushort,
//     pub revents: gushort,
// }
// impl ::std::default::Default for _GPollFD {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GSList = _GSList;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GSList {
//     pub data: gpointer,
//     pub next: *mut GSList,
// }
// impl ::std::default::Default for _GSList {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GIOCondition {
//     G_IO_IN = 1,
//     G_IO_OUT = 4,
//     G_IO_PRI = 2,
//     G_IO_ERR = 8,
//     G_IO_HUP = 16,
//     G_IO_NVAL = 32,
// }
// pub enum _GMainContext { }
// pub type GMainContext = _GMainContext;
// pub enum _GMainLoop { }
// pub type GMainLoop = _GMainLoop;
// pub type GSource = _GSource;
// pub enum _GSourcePrivate { }
// pub type GSourcePrivate = _GSourcePrivate;
// pub type GSourceCallbackFuncs = _GSourceCallbackFuncs;
// pub type GSourceFuncs = _GSourceFuncs;
// pub type GSourceFunc =
//     ::std::option::Option<extern "C" fn(user_data: gpointer) -> gboolean>;
// pub type GChildWatchFunc =
//     ::std::option::Option<extern "C" fn(pid: GPid, status: gint,
//                                         user_data: gpointer)>;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GSource {
//     pub callback_data: gpointer,
//     pub callback_funcs: *mut GSourceCallbackFuncs,
//     pub source_funcs: *const GSourceFuncs,
//     pub ref_count: guint,
//     pub context: *mut GMainContext,
//     pub priority: gint,
//     pub flags: guint,
//     pub source_id: guint,
//     pub poll_fds: *mut GSList,
//     pub prev: *mut GSource,
//     pub next: *mut GSource,
//     pub name: *mut ::std::os::raw::c_char,
//     pub priv_: *mut GSourcePrivate,
// }
// impl ::std::default::Default for _GSource {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GSourceCallbackFuncs {
//     pub ref_: ::std::option::Option<extern "C" fn(cb_data: gpointer)>,
//     pub unref: ::std::option::Option<extern "C" fn(cb_data: gpointer)>,
//     pub get: ::std::option::Option<unsafe extern "C" fn(cb_data: gpointer,
//                                                         source: *mut GSource,
//                                                         func:
//                                                             *mut GSourceFunc,
//                                                         data: *mut gpointer)>,
// }
// impl ::std::default::Default for _GSourceCallbackFuncs {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GSourceDummyMarshal = ::std::option::Option<extern "C" fn()>;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GSourceFuncs {
//     pub prepare: ::std::option::Option<unsafe extern "C" fn(source:
//                                                                 *mut GSource,
//                                                             timeout_:
//                                                                 *mut gint)
//                                            -> gboolean>,
//     pub check: ::std::option::Option<unsafe extern "C" fn(source:
//                                                               *mut GSource)
//                                          -> gboolean>,
//     pub dispatch: ::std::option::Option<unsafe extern "C" fn(source:
//                                                                  *mut GSource,
//                                                              callback:
//                                                                  GSourceFunc,
//                                                              user_data:
//                                                                  gpointer)
//                                             -> gboolean>,
//     pub finalize: ::std::option::Option<unsafe extern "C" fn(source:
//                                                                  *mut GSource)>,
//     pub closure_callback: GSourceFunc,
//     pub closure_marshal: GSourceDummyMarshal,
// }
// impl ::std::default::Default for _GSourceFuncs {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type gunichar = guint32;
// pub type gunichar2 = guint16;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GUnicodeType {
//     G_UNICODE_CONTROL = 0,
//     G_UNICODE_FORMAT = 1,
//     G_UNICODE_UNASSIGNED = 2,
//     G_UNICODE_PRIVATE_USE = 3,
//     G_UNICODE_SURROGATE = 4,
//     G_UNICODE_LOWERCASE_LETTER = 5,
//     G_UNICODE_MODIFIER_LETTER = 6,
//     G_UNICODE_OTHER_LETTER = 7,
//     G_UNICODE_TITLECASE_LETTER = 8,
//     G_UNICODE_UPPERCASE_LETTER = 9,
//     G_UNICODE_SPACING_MARK = 10,
//     G_UNICODE_ENCLOSING_MARK = 11,
//     G_UNICODE_NON_SPACING_MARK = 12,
//     G_UNICODE_DECIMAL_NUMBER = 13,
//     G_UNICODE_LETTER_NUMBER = 14,
//     G_UNICODE_OTHER_NUMBER = 15,
//     G_UNICODE_CONNECT_PUNCTUATION = 16,
//     G_UNICODE_DASH_PUNCTUATION = 17,
//     G_UNICODE_CLOSE_PUNCTUATION = 18,
//     G_UNICODE_FINAL_PUNCTUATION = 19,
//     G_UNICODE_INITIAL_PUNCTUATION = 20,
//     G_UNICODE_OTHER_PUNCTUATION = 21,
//     G_UNICODE_OPEN_PUNCTUATION = 22,
//     G_UNICODE_CURRENCY_SYMBOL = 23,
//     G_UNICODE_MODIFIER_SYMBOL = 24,
//     G_UNICODE_MATH_SYMBOL = 25,
//     G_UNICODE_OTHER_SYMBOL = 26,
//     G_UNICODE_LINE_SEPARATOR = 27,
//     G_UNICODE_PARAGRAPH_SEPARATOR = 28,
//     G_UNICODE_SPACE_SEPARATOR = 29,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GUnicodeBreakType {
//     G_UNICODE_BREAK_MANDATORY = 0,
//     G_UNICODE_BREAK_CARRIAGE_RETURN = 1,
//     G_UNICODE_BREAK_LINE_FEED = 2,
//     G_UNICODE_BREAK_COMBINING_MARK = 3,
//     G_UNICODE_BREAK_SURROGATE = 4,
//     G_UNICODE_BREAK_ZERO_WIDTH_SPACE = 5,
//     G_UNICODE_BREAK_INSEPARABLE = 6,
//     G_UNICODE_BREAK_NON_BREAKING_GLUE = 7,
//     G_UNICODE_BREAK_CONTINGENT = 8,
//     G_UNICODE_BREAK_SPACE = 9,
//     G_UNICODE_BREAK_AFTER = 10,
//     G_UNICODE_BREAK_BEFORE = 11,
//     G_UNICODE_BREAK_BEFORE_AND_AFTER = 12,
//     G_UNICODE_BREAK_HYPHEN = 13,
//     G_UNICODE_BREAK_NON_STARTER = 14,
//     G_UNICODE_BREAK_OPEN_PUNCTUATION = 15,
//     G_UNICODE_BREAK_CLOSE_PUNCTUATION = 16,
//     G_UNICODE_BREAK_QUOTATION = 17,
//     G_UNICODE_BREAK_EXCLAMATION = 18,
//     G_UNICODE_BREAK_IDEOGRAPHIC = 19,
//     G_UNICODE_BREAK_NUMERIC = 20,
//     G_UNICODE_BREAK_INFIX_SEPARATOR = 21,
//     G_UNICODE_BREAK_SYMBOL = 22,
//     G_UNICODE_BREAK_ALPHABETIC = 23,
//     G_UNICODE_BREAK_PREFIX = 24,
//     G_UNICODE_BREAK_POSTFIX = 25,
//     G_UNICODE_BREAK_COMPLEX_CONTEXT = 26,
//     G_UNICODE_BREAK_AMBIGUOUS = 27,
//     G_UNICODE_BREAK_UNKNOWN = 28,
//     G_UNICODE_BREAK_NEXT_LINE = 29,
//     G_UNICODE_BREAK_WORD_JOINER = 30,
//     G_UNICODE_BREAK_HANGUL_L_JAMO = 31,
//     G_UNICODE_BREAK_HANGUL_V_JAMO = 32,
//     G_UNICODE_BREAK_HANGUL_T_JAMO = 33,
//     G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34,
//     G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35,
//     G_UNICODE_BREAK_CLOSE_PARANTHESIS = 36,
//     G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = 37,
//     G_UNICODE_BREAK_HEBREW_LETTER = 38,
//     G_UNICODE_BREAK_REGIONAL_INDICATOR = 39,
// }
// #[derive(Copy, Clone)]
// #[repr(i32)]
// #[derive(Debug)]
// pub enum GUnicodeScript {
//     G_UNICODE_SCRIPT_INVALID_CODE = -1,
//     G_UNICODE_SCRIPT_COMMON = 0,
//     G_UNICODE_SCRIPT_INHERITED = 1,
//     G_UNICODE_SCRIPT_ARABIC = 2,
//     G_UNICODE_SCRIPT_ARMENIAN = 3,
//     G_UNICODE_SCRIPT_BENGALI = 4,
//     G_UNICODE_SCRIPT_BOPOMOFO = 5,
//     G_UNICODE_SCRIPT_CHEROKEE = 6,
//     G_UNICODE_SCRIPT_COPTIC = 7,
//     G_UNICODE_SCRIPT_CYRILLIC = 8,
//     G_UNICODE_SCRIPT_DESERET = 9,
//     G_UNICODE_SCRIPT_DEVANAGARI = 10,
//     G_UNICODE_SCRIPT_ETHIOPIC = 11,
//     G_UNICODE_SCRIPT_GEORGIAN = 12,
//     G_UNICODE_SCRIPT_GOTHIC = 13,
//     G_UNICODE_SCRIPT_GREEK = 14,
//     G_UNICODE_SCRIPT_GUJARATI = 15,
//     G_UNICODE_SCRIPT_GURMUKHI = 16,
//     G_UNICODE_SCRIPT_HAN = 17,
//     G_UNICODE_SCRIPT_HANGUL = 18,
//     G_UNICODE_SCRIPT_HEBREW = 19,
//     G_UNICODE_SCRIPT_HIRAGANA = 20,
//     G_UNICODE_SCRIPT_KANNADA = 21,
//     G_UNICODE_SCRIPT_KATAKANA = 22,
//     G_UNICODE_SCRIPT_KHMER = 23,
//     G_UNICODE_SCRIPT_LAO = 24,
//     G_UNICODE_SCRIPT_LATIN = 25,
//     G_UNICODE_SCRIPT_MALAYALAM = 26,
//     G_UNICODE_SCRIPT_MONGOLIAN = 27,
//     G_UNICODE_SCRIPT_MYANMAR = 28,
//     G_UNICODE_SCRIPT_OGHAM = 29,
//     G_UNICODE_SCRIPT_OLD_ITALIC = 30,
//     G_UNICODE_SCRIPT_ORIYA = 31,
//     G_UNICODE_SCRIPT_RUNIC = 32,
//     G_UNICODE_SCRIPT_SINHALA = 33,
//     G_UNICODE_SCRIPT_SYRIAC = 34,
//     G_UNICODE_SCRIPT_TAMIL = 35,
//     G_UNICODE_SCRIPT_TELUGU = 36,
//     G_UNICODE_SCRIPT_THAANA = 37,
//     G_UNICODE_SCRIPT_THAI = 38,
//     G_UNICODE_SCRIPT_TIBETAN = 39,
//     G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40,
//     G_UNICODE_SCRIPT_YI = 41,
//     G_UNICODE_SCRIPT_TAGALOG = 42,
//     G_UNICODE_SCRIPT_HANUNOO = 43,
//     G_UNICODE_SCRIPT_BUHID = 44,
//     G_UNICODE_SCRIPT_TAGBANWA = 45,
//     G_UNICODE_SCRIPT_BRAILLE = 46,
//     G_UNICODE_SCRIPT_CYPRIOT = 47,
//     G_UNICODE_SCRIPT_LIMBU = 48,
//     G_UNICODE_SCRIPT_OSMANYA = 49,
//     G_UNICODE_SCRIPT_SHAVIAN = 50,
//     G_UNICODE_SCRIPT_LINEAR_B = 51,
//     G_UNICODE_SCRIPT_TAI_LE = 52,
//     G_UNICODE_SCRIPT_UGARITIC = 53,
//     G_UNICODE_SCRIPT_NEW_TAI_LUE = 54,
//     G_UNICODE_SCRIPT_BUGINESE = 55,
//     G_UNICODE_SCRIPT_GLAGOLITIC = 56,
//     G_UNICODE_SCRIPT_TIFINAGH = 57,
//     G_UNICODE_SCRIPT_SYLOTI_NAGRI = 58,
//     G_UNICODE_SCRIPT_OLD_PERSIAN = 59,
//     G_UNICODE_SCRIPT_KHAROSHTHI = 60,
//     G_UNICODE_SCRIPT_UNKNOWN = 61,
//     G_UNICODE_SCRIPT_BALINESE = 62,
//     G_UNICODE_SCRIPT_CUNEIFORM = 63,
//     G_UNICODE_SCRIPT_PHOENICIAN = 64,
//     G_UNICODE_SCRIPT_PHAGS_PA = 65,
//     G_UNICODE_SCRIPT_NKO = 66,
//     G_UNICODE_SCRIPT_KAYAH_LI = 67,
//     G_UNICODE_SCRIPT_LEPCHA = 68,
//     G_UNICODE_SCRIPT_REJANG = 69,
//     G_UNICODE_SCRIPT_SUNDANESE = 70,
//     G_UNICODE_SCRIPT_SAURASHTRA = 71,
//     G_UNICODE_SCRIPT_CHAM = 72,
//     G_UNICODE_SCRIPT_OL_CHIKI = 73,
//     G_UNICODE_SCRIPT_VAI = 74,
//     G_UNICODE_SCRIPT_CARIAN = 75,
//     G_UNICODE_SCRIPT_LYCIAN = 76,
//     G_UNICODE_SCRIPT_LYDIAN = 77,
//     G_UNICODE_SCRIPT_AVESTAN = 78,
//     G_UNICODE_SCRIPT_BAMUM = 79,
//     G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80,
//     G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = 81,
//     G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82,
//     G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83,
//     G_UNICODE_SCRIPT_JAVANESE = 84,
//     G_UNICODE_SCRIPT_KAITHI = 85,
//     G_UNICODE_SCRIPT_LISU = 86,
//     G_UNICODE_SCRIPT_MEETEI_MAYEK = 87,
//     G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88,
//     G_UNICODE_SCRIPT_OLD_TURKIC = 89,
//     G_UNICODE_SCRIPT_SAMARITAN = 90,
//     G_UNICODE_SCRIPT_TAI_THAM = 91,
//     G_UNICODE_SCRIPT_TAI_VIET = 92,
//     G_UNICODE_SCRIPT_BATAK = 93,
//     G_UNICODE_SCRIPT_BRAHMI = 94,
//     G_UNICODE_SCRIPT_MANDAIC = 95,
//     G_UNICODE_SCRIPT_CHAKMA = 96,
//     G_UNICODE_SCRIPT_MEROITIC_CURSIVE = 97,
//     G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = 98,
//     G_UNICODE_SCRIPT_MIAO = 99,
//     G_UNICODE_SCRIPT_SHARADA = 100,
//     G_UNICODE_SCRIPT_SORA_SOMPENG = 101,
//     G_UNICODE_SCRIPT_TAKRI = 102,
//     G_UNICODE_SCRIPT_BASSA_VAH = 103,
//     G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN = 104,
//     G_UNICODE_SCRIPT_DUPLOYAN = 105,
//     G_UNICODE_SCRIPT_ELBASAN = 106,
//     G_UNICODE_SCRIPT_GRANTHA = 107,
//     G_UNICODE_SCRIPT_KHOJKI = 108,
//     G_UNICODE_SCRIPT_KHUDAWADI = 109,
//     G_UNICODE_SCRIPT_LINEAR_A = 110,
//     G_UNICODE_SCRIPT_MAHAJANI = 111,
//     G_UNICODE_SCRIPT_MANICHAEAN = 112,
//     G_UNICODE_SCRIPT_MENDE_KIKAKUI = 113,
//     G_UNICODE_SCRIPT_MODI = 114,
//     G_UNICODE_SCRIPT_MRO = 115,
//     G_UNICODE_SCRIPT_NABATAEAN = 116,
//     G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN = 117,
//     G_UNICODE_SCRIPT_OLD_PERMIC = 118,
//     G_UNICODE_SCRIPT_PAHAWH_HMONG = 119,
//     G_UNICODE_SCRIPT_PALMYRENE = 120,
//     G_UNICODE_SCRIPT_PAU_CIN_HAU = 121,
//     G_UNICODE_SCRIPT_PSALTER_PAHLAVI = 122,
//     G_UNICODE_SCRIPT_SIDDHAM = 123,
//     G_UNICODE_SCRIPT_TIRHUTA = 124,
//     G_UNICODE_SCRIPT_WARANG_CITI = 125,
//     G_UNICODE_SCRIPT_AHOM = 126,
//     G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS = 127,
//     G_UNICODE_SCRIPT_HATRAN = 128,
//     G_UNICODE_SCRIPT_MULTANI = 129,
//     G_UNICODE_SCRIPT_OLD_HUNGARIAN = 130,
//     G_UNICODE_SCRIPT_SIGNWRITING = 131,
// }
// pub const G_NORMALIZE_NFD: GNormalizeMode =
//     GNormalizeMode::G_NORMALIZE_DEFAULT;
// pub const G_NORMALIZE_NFC: GNormalizeMode =
//     GNormalizeMode::G_NORMALIZE_DEFAULT_COMPOSE;
// pub const G_NORMALIZE_NFKD: GNormalizeMode = GNormalizeMode::G_NORMALIZE_ALL;
// pub const G_NORMALIZE_NFKC: GNormalizeMode =
//     GNormalizeMode::G_NORMALIZE_ALL_COMPOSE;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GNormalizeMode {
//     G_NORMALIZE_DEFAULT = 0,
//     G_NORMALIZE_DEFAULT_COMPOSE = 1,
//     G_NORMALIZE_ALL = 2,
//     G_NORMALIZE_ALL_COMPOSE = 3,
// }
// pub type GString = _GString;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GString {
//     pub str: *mut gchar,
//     pub len: gsize,
//     pub allocated_len: gsize,
// }
// impl ::std::default::Default for _GString {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GIOChannel = _GIOChannel;
// pub type GIOFuncs = _GIOFuncs;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GIOError {
//     G_IO_ERROR_NONE = 0,
//     G_IO_ERROR_AGAIN = 1,
//     G_IO_ERROR_INVAL = 2,
//     G_IO_ERROR_UNKNOWN = 3,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GIOChannelError {
//     G_IO_CHANNEL_ERROR_FBIG = 0,
//     G_IO_CHANNEL_ERROR_INVAL = 1,
//     G_IO_CHANNEL_ERROR_IO = 2,
//     G_IO_CHANNEL_ERROR_ISDIR = 3,
//     G_IO_CHANNEL_ERROR_NOSPC = 4,
//     G_IO_CHANNEL_ERROR_NXIO = 5,
//     G_IO_CHANNEL_ERROR_OVERFLOW = 6,
//     G_IO_CHANNEL_ERROR_PIPE = 7,
//     G_IO_CHANNEL_ERROR_FAILED = 8,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GIOStatus {
//     G_IO_STATUS_ERROR = 0,
//     G_IO_STATUS_NORMAL = 1,
//     G_IO_STATUS_EOF = 2,
//     G_IO_STATUS_AGAIN = 3,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GSeekType { G_SEEK_CUR = 0, G_SEEK_SET = 1, G_SEEK_END = 2, }
// pub const G_IO_FLAG_IS_WRITEABLE: GIOFlags = GIOFlags::G_IO_FLAG_IS_WRITABLE;
// pub const G_IO_FLAG_GET_MASK: GIOFlags = GIOFlags::G_IO_FLAG_MASK;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GIOFlags {
//     G_IO_FLAG_APPEND = 1,
//     G_IO_FLAG_NONBLOCK = 2,
//     G_IO_FLAG_IS_READABLE = 4,
//     G_IO_FLAG_IS_WRITABLE = 8,
//     G_IO_FLAG_IS_SEEKABLE = 16,
//     G_IO_FLAG_MASK = 31,
//     G_IO_FLAG_SET_MASK = 3,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GIOChannel {
//     pub ref_count: gint,
//     pub funcs: *mut GIOFuncs,
//     pub encoding: *mut gchar,
//     pub read_cd: GIConv,
//     pub write_cd: GIConv,
//     pub line_term: *mut gchar,
//     pub line_term_len: guint,
//     pub buf_size: gsize,
//     pub read_buf: *mut GString,
//     pub encoded_read_buf: *mut GString,
//     pub write_buf: *mut GString,
//     pub partial_write_buf: [gchar; 6usize],
//     pub _bindgen_bitfield_1_: guint,
//     pub _bindgen_bitfield_2_: guint,
//     pub _bindgen_bitfield_3_: guint,
//     pub _bindgen_bitfield_4_: guint,
//     pub _bindgen_bitfield_5_: guint,
//     pub _bindgen_bitfield_6_: guint,
//     pub reserved1: gpointer,
//     pub reserved2: gpointer,
// }
// impl ::std::default::Default for _GIOChannel {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GIOFunc =
//     ::std::option::Option<unsafe extern "C" fn(source: *mut GIOChannel,
//                                                condition: GIOCondition,
//                                                data: gpointer) -> gboolean>;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GIOFuncs {
//     pub io_read: ::std::option::Option<unsafe extern "C" fn(channel:
//                                                                 *mut GIOChannel,
//                                                             buf: *mut gchar,
//                                                             count: gsize,
//                                                             bytes_read:
//                                                                 *mut gsize,
//                                                             err:
//                                                                 *mut *mut GError)
//                                            -> GIOStatus>,
//     pub io_write: ::std::option::Option<unsafe extern "C" fn(channel:
//                                                                  *mut GIOChannel,
//                                                              buf:
//                                                                  *const gchar,
//                                                              count: gsize,
//                                                              bytes_written:
//                                                                  *mut gsize,
//                                                              err:
//                                                                  *mut *mut GError)
//                                             -> GIOStatus>,
//     pub io_seek: ::std::option::Option<unsafe extern "C" fn(channel:
//                                                                 *mut GIOChannel,
//                                                             offset: gint64,
//                                                             type_: GSeekType,
//                                                             err:
//                                                                 *mut *mut GError)
//                                            -> GIOStatus>,
//     pub io_close: ::std::option::Option<unsafe extern "C" fn(channel:
//                                                                  *mut GIOChannel,
//                                                              err:
//                                                                  *mut *mut GError)
//                                             -> GIOStatus>,
//     pub io_create_watch: ::std::option::Option<unsafe extern "C" fn(channel:
//                                                                         *mut GIOChannel,
//                                                                     condition:
//                                                                         GIOCondition)
//                                                    -> *mut GSource>,
//     pub io_free: ::std::option::Option<unsafe extern "C" fn(channel:
//                                                                 *mut GIOChannel)>,
//     pub io_set_flags: ::std::option::Option<unsafe extern "C" fn(channel:
//                                                                      *mut GIOChannel,
//                                                                  flags:
//                                                                      GIOFlags,
//                                                                  err:
//                                                                      *mut *mut GError)
//                                                 -> GIOStatus>,
//     pub io_get_flags: ::std::option::Option<unsafe extern "C" fn(channel:
//                                                                      *mut GIOChannel)
//                                                 -> GIOFlags>,
// }
// impl ::std::default::Default for _GIOFuncs {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GKeyFileError {
//     G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0,
//     G_KEY_FILE_ERROR_PARSE = 1,
//     G_KEY_FILE_ERROR_NOT_FOUND = 2,
//     G_KEY_FILE_ERROR_KEY_NOT_FOUND = 3,
//     G_KEY_FILE_ERROR_GROUP_NOT_FOUND = 4,
//     G_KEY_FILE_ERROR_INVALID_VALUE = 5,
// }
// pub enum _GKeyFile { }
// pub type GKeyFile = _GKeyFile;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GKeyFileFlags {
//     G_KEY_FILE_NONE = 0,
//     G_KEY_FILE_KEEP_COMMENTS = 1,
//     G_KEY_FILE_KEEP_TRANSLATIONS = 2,
// }
// pub enum _GMappedFile { }
// pub type GMappedFile = _GMappedFile;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GMarkupError {
//     G_MARKUP_ERROR_BAD_UTF8 = 0,
//     G_MARKUP_ERROR_EMPTY = 1,
//     G_MARKUP_ERROR_PARSE = 2,
//     G_MARKUP_ERROR_UNKNOWN_ELEMENT = 3,
//     G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4,
//     G_MARKUP_ERROR_INVALID_CONTENT = 5,
//     G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GMarkupParseFlags {
//     G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1,
//     G_MARKUP_TREAT_CDATA_AS_TEXT = 2,
//     G_MARKUP_PREFIX_ERROR_POSITION = 4,
//     G_MARKUP_IGNORE_QUALIFIED = 8,
// }
// pub enum _GMarkupParseContext { }
// pub type GMarkupParseContext = _GMarkupParseContext;
// pub type GMarkupParser = _GMarkupParser;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GMarkupParser {
//     pub start_element: ::std::option::Option<unsafe extern "C" fn(context:
//                                                                       *mut GMarkupParseContext,
//                                                                   element_name:
//                                                                       *const gchar,
//                                                                   attribute_names:
//                                                                       *mut *const gchar,
//                                                                   attribute_values:
//                                                                       *mut *const gchar,
//                                                                   user_data:
//                                                                       gpointer,
//                                                                   error:
//                                                                       *mut *mut GError)>,
//     pub end_element: ::std::option::Option<unsafe extern "C" fn(context:
//                                                                     *mut GMarkupParseContext,
//                                                                 element_name:
//                                                                     *const gchar,
//                                                                 user_data:
//                                                                     gpointer,
//                                                                 error:
//                                                                     *mut *mut GError)>,
//     pub text: ::std::option::Option<unsafe extern "C" fn(context:
//                                                              *mut GMarkupParseContext,
//                                                          text: *const gchar,
//                                                          text_len: gsize,
//                                                          user_data: gpointer,
//                                                          error:
//                                                              *mut *mut GError)>,
//     pub passthrough: ::std::option::Option<unsafe extern "C" fn(context:
//                                                                     *mut GMarkupParseContext,
//                                                                 passthrough_text:
//                                                                     *const gchar,
//                                                                 text_len:
//                                                                     gsize,
//                                                                 user_data:
//                                                                     gpointer,
//                                                                 error:
//                                                                     *mut *mut GError)>,
//     pub error: ::std::option::Option<unsafe extern "C" fn(context:
//                                                               *mut GMarkupParseContext,
//                                                           error: *mut GError,
//                                                           user_data:
//                                                               gpointer)>,
// }
// impl ::std::default::Default for _GMarkupParser {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GMarkupCollectType {
//     G_MARKUP_COLLECT_INVALID = 0,
//     G_MARKUP_COLLECT_STRING = 1,
//     G_MARKUP_COLLECT_STRDUP = 2,
//     G_MARKUP_COLLECT_BOOLEAN = 3,
//     G_MARKUP_COLLECT_TRISTATE = 4,
//     G_MARKUP_COLLECT_OPTIONAL = 65536,
// }
// #[derive(Copy, Clone)]
// #[repr(i32)]
// #[derive(Debug)]
// pub enum GLogLevelFlags {
//     G_LOG_FLAG_RECURSION = 1,
//     G_LOG_FLAG_FATAL = 2,
//     G_LOG_LEVEL_ERROR = 4,
//     G_LOG_LEVEL_CRITICAL = 8,
//     G_LOG_LEVEL_WARNING = 16,
//     G_LOG_LEVEL_MESSAGE = 32,
//     G_LOG_LEVEL_INFO = 64,
//     G_LOG_LEVEL_DEBUG = 128,
//     G_LOG_LEVEL_MASK = -4,
// }
// pub type GLogFunc =
//     ::std::option::Option<unsafe extern "C" fn(log_domain: *const gchar,
//                                                log_level: GLogLevelFlags,
//                                                message: *const gchar,
//                                                user_data: gpointer)>;
// pub type GPrintFunc =
//     ::std::option::Option<unsafe extern "C" fn(string: *const gchar)>;
// pub enum _GOptionContext { }
// pub type GOptionContext = _GOptionContext;
// pub enum _GOptionGroup { }
// pub type GOptionGroup = _GOptionGroup;
// pub type GOptionEntry = _GOptionEntry;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GOptionFlags {
//     G_OPTION_FLAG_NONE = 0,
//     G_OPTION_FLAG_HIDDEN = 1,
//     G_OPTION_FLAG_IN_MAIN = 2,
//     G_OPTION_FLAG_REVERSE = 4,
//     G_OPTION_FLAG_NO_ARG = 8,
//     G_OPTION_FLAG_FILENAME = 16,
//     G_OPTION_FLAG_OPTIONAL_ARG = 32,
//     G_OPTION_FLAG_NOALIAS = 64,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GOptionArg {
//     G_OPTION_ARG_NONE = 0,
//     G_OPTION_ARG_STRING = 1,
//     G_OPTION_ARG_INT = 2,
//     G_OPTION_ARG_CALLBACK = 3,
//     G_OPTION_ARG_FILENAME = 4,
//     G_OPTION_ARG_STRING_ARRAY = 5,
//     G_OPTION_ARG_FILENAME_ARRAY = 6,
//     G_OPTION_ARG_DOUBLE = 7,
//     G_OPTION_ARG_INT64 = 8,
// }
// pub type GOptionArgFunc =
//     ::std::option::Option<unsafe extern "C" fn(option_name: *const gchar,
//                                                value: *const gchar,
//                                                data: gpointer,
//                                                error: *mut *mut GError)
//                               -> gboolean>;
// pub type GOptionParseFunc =
//     ::std::option::Option<unsafe extern "C" fn(context: *mut GOptionContext,
//                                                group: *mut GOptionGroup,
//                                                data: gpointer,
//                                                error: *mut *mut GError)
//                               -> gboolean>;
// pub type GOptionErrorFunc =
//     ::std::option::Option<unsafe extern "C" fn(context: *mut GOptionContext,
//                                                group: *mut GOptionGroup,
//                                                data: gpointer,
//                                                error: *mut *mut GError)>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GOptionError {
//     G_OPTION_ERROR_UNKNOWN_OPTION = 0,
//     G_OPTION_ERROR_BAD_VALUE = 1,
//     G_OPTION_ERROR_FAILED = 2,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GOptionEntry {
//     pub long_name: *const gchar,
//     pub short_name: gchar,
//     pub flags: gint,
//     pub arg: GOptionArg,
//     pub arg_data: gpointer,
//     pub description: *const gchar,
//     pub arg_description: *const gchar,
// }
// impl ::std::default::Default for _GOptionEntry {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _GPatternSpec { }
// pub type GPatternSpec = _GPatternSpec;
// pub type GQueue = _GQueue;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GQueue {
//     pub head: *mut GList,
//     pub tail: *mut GList,
//     pub length: guint,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GQueue {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _GRand { }
// pub type GRand = _GRand;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GRegexError {
//     G_REGEX_ERROR_COMPILE = 0,
//     G_REGEX_ERROR_OPTIMIZE = 1,
//     G_REGEX_ERROR_REPLACE = 2,
//     G_REGEX_ERROR_MATCH = 3,
//     G_REGEX_ERROR_INTERNAL = 4,
//     G_REGEX_ERROR_STRAY_BACKSLASH = 101,
//     G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102,
//     G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103,
//     G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104,
//     G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105,
//     G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106,
//     G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107,
//     G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108,
//     G_REGEX_ERROR_NOTHING_TO_REPEAT = 109,
//     G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112,
//     G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113,
//     G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114,
//     G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115,
//     G_REGEX_ERROR_UNTERMINATED_COMMENT = 118,
//     G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120,
//     G_REGEX_ERROR_MEMORY_ERROR = 121,
//     G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125,
//     G_REGEX_ERROR_MALFORMED_CONDITION = 126,
//     G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127,
//     G_REGEX_ERROR_ASSERTION_EXPECTED = 128,
//     G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130,
//     G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131,
//     G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134,
//     G_REGEX_ERROR_INVALID_CONDITION = 135,
//     G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136,
//     G_REGEX_ERROR_INFINITE_LOOP = 140,
//     G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142,
//     G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143,
//     G_REGEX_ERROR_MALFORMED_PROPERTY = 146,
//     G_REGEX_ERROR_UNKNOWN_PROPERTY = 147,
//     G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148,
//     G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149,
//     G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151,
//     G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154,
//     G_REGEX_ERROR_DEFINE_REPETION = 155,
//     G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156,
//     G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157,
//     G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158,
//     G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159,
//     G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160,
//     G_REGEX_ERROR_NUMBER_TOO_BIG = 161,
//     G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162,
//     G_REGEX_ERROR_MISSING_DIGIT = 163,
//     G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164,
//     G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165,
//     G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166,
//     G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168,
//     G_REGEX_ERROR_MISSING_NAME = 169,
//     G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171,
//     G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172,
//     G_REGEX_ERROR_NAME_TOO_LONG = 175,
//     G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GRegexCompileFlags {
//     G_REGEX_CASELESS = 1,
//     G_REGEX_MULTILINE = 2,
//     G_REGEX_DOTALL = 4,
//     G_REGEX_EXTENDED = 8,
//     G_REGEX_ANCHORED = 16,
//     G_REGEX_DOLLAR_ENDONLY = 32,
//     G_REGEX_UNGREEDY = 512,
//     G_REGEX_RAW = 2048,
//     G_REGEX_NO_AUTO_CAPTURE = 4096,
//     G_REGEX_OPTIMIZE = 8192,
//     G_REGEX_FIRSTLINE = 262144,
//     G_REGEX_DUPNAMES = 524288,
//     G_REGEX_NEWLINE_CR = 1048576,
//     G_REGEX_NEWLINE_LF = 2097152,
//     G_REGEX_NEWLINE_CRLF = 3145728,
//     G_REGEX_NEWLINE_ANYCRLF = 5242880,
//     G_REGEX_BSR_ANYCRLF = 8388608,
//     G_REGEX_JAVASCRIPT_COMPAT = 33554432,
// }
// pub const G_REGEX_MATCH_PARTIAL_SOFT: GRegexMatchFlags =
//     GRegexMatchFlags::G_REGEX_MATCH_PARTIAL;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GRegexMatchFlags {
//     G_REGEX_MATCH_ANCHORED = 16,
//     G_REGEX_MATCH_NOTBOL = 128,
//     G_REGEX_MATCH_NOTEOL = 256,
//     G_REGEX_MATCH_NOTEMPTY = 1024,
//     G_REGEX_MATCH_PARTIAL = 32768,
//     G_REGEX_MATCH_NEWLINE_CR = 1048576,
//     G_REGEX_MATCH_NEWLINE_LF = 2097152,
//     G_REGEX_MATCH_NEWLINE_CRLF = 3145728,
//     G_REGEX_MATCH_NEWLINE_ANY = 4194304,
//     G_REGEX_MATCH_NEWLINE_ANYCRLF = 5242880,
//     G_REGEX_MATCH_BSR_ANYCRLF = 8388608,
//     G_REGEX_MATCH_BSR_ANY = 16777216,
//     G_REGEX_MATCH_PARTIAL_HARD = 134217728,
//     G_REGEX_MATCH_NOTEMPTY_ATSTART = 268435456,
// }
// pub enum _GRegex { }
// pub type GRegex = _GRegex;
// pub enum _GMatchInfo { }
// pub type GMatchInfo = _GMatchInfo;
// pub type GRegexEvalCallback =
//     ::std::option::Option<unsafe extern "C" fn(match_info: *const GMatchInfo,
//                                                result: *mut GString,
//                                                user_data: gpointer)
//                               -> gboolean>;
// pub type GScanner = _GScanner;
// pub type GScannerConfig = _GScannerConfig;
// pub type GTokenValue = _GTokenValue;
// pub type GScannerMsgFunc =
//     ::std::option::Option<unsafe extern "C" fn(scanner: *mut GScanner,
//                                                message: *mut gchar,
//                                                error: gboolean)>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GErrorType {
//     G_ERR_UNKNOWN = 0,
//     G_ERR_UNEXP_EOF = 1,
//     G_ERR_UNEXP_EOF_IN_STRING = 2,
//     G_ERR_UNEXP_EOF_IN_COMMENT = 3,
//     G_ERR_NON_DIGIT_IN_CONST = 4,
//     G_ERR_DIGIT_RADIX = 5,
//     G_ERR_FLOAT_RADIX = 6,
//     G_ERR_FLOAT_MALFORMED = 7,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GTokenType {
//     G_TOKEN_EOF = 0,
//     G_TOKEN_LEFT_PAREN = 40,
//     G_TOKEN_RIGHT_PAREN = 41,
//     G_TOKEN_LEFT_CURLY = 123,
//     G_TOKEN_RIGHT_CURLY = 125,
//     G_TOKEN_LEFT_BRACE = 91,
//     G_TOKEN_RIGHT_BRACE = 93,
//     G_TOKEN_EQUAL_SIGN = 61,
//     G_TOKEN_COMMA = 44,
//     G_TOKEN_NONE = 256,
//     G_TOKEN_ERROR = 257,
//     G_TOKEN_CHAR = 258,
//     G_TOKEN_BINARY = 259,
//     G_TOKEN_OCTAL = 260,
//     G_TOKEN_INT = 261,
//     G_TOKEN_HEX = 262,
//     G_TOKEN_FLOAT = 263,
//     G_TOKEN_STRING = 264,
//     G_TOKEN_SYMBOL = 265,
//     G_TOKEN_IDENTIFIER = 266,
//     G_TOKEN_IDENTIFIER_NULL = 267,
//     G_TOKEN_COMMENT_SINGLE = 268,
//     G_TOKEN_COMMENT_MULTI = 269,
//     G_TOKEN_LAST = 270,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTokenValue {
//     pub _bindgen_data_: [u64; 1usize],
// }
// impl _GTokenValue {
//     pub unsafe fn v_symbol(&mut self) -> *mut gpointer {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_identifier(&mut self) -> *mut *mut gchar {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_binary(&mut self) -> *mut gulong {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_octal(&mut self) -> *mut gulong {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_int(&mut self) -> *mut gulong {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_int64(&mut self) -> *mut guint64 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_float(&mut self) -> *mut gdouble {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_hex(&mut self) -> *mut gulong {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_string(&mut self) -> *mut *mut gchar {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_comment(&mut self) -> *mut *mut gchar {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_char(&mut self) -> *mut guchar {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_error(&mut self) -> *mut guint {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for _GTokenValue {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GScannerConfig {
//     pub cset_skip_characters: *mut gchar,
//     pub cset_identifier_first: *mut gchar,
//     pub cset_identifier_nth: *mut gchar,
//     pub cpair_comment_single: *mut gchar,
//     pub _bindgen_bitfield_1_: guint,
//     pub _bindgen_bitfield_2_: guint,
//     pub _bindgen_bitfield_3_: guint,
//     pub _bindgen_bitfield_4_: guint,
//     pub _bindgen_bitfield_5_: guint,
//     pub _bindgen_bitfield_6_: guint,
//     pub _bindgen_bitfield_7_: guint,
//     pub _bindgen_bitfield_8_: guint,
//     pub _bindgen_bitfield_9_: guint,
//     pub _bindgen_bitfield_10_: guint,
//     pub _bindgen_bitfield_11_: guint,
//     pub _bindgen_bitfield_12_: guint,
//     pub _bindgen_bitfield_13_: guint,
//     pub _bindgen_bitfield_14_: guint,
//     pub _bindgen_bitfield_15_: guint,
//     pub _bindgen_bitfield_16_: guint,
//     pub _bindgen_bitfield_17_: guint,
//     pub _bindgen_bitfield_18_: guint,
//     pub _bindgen_bitfield_19_: guint,
//     pub _bindgen_bitfield_20_: guint,
//     pub _bindgen_bitfield_21_: guint,
//     pub _bindgen_bitfield_22_: guint,
//     pub padding_dummy: guint,
// }
// impl ::std::default::Default for _GScannerConfig {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GScanner {
//     pub user_data: gpointer,
//     pub max_parse_errors: guint,
//     pub parse_errors: guint,
//     pub input_name: *const gchar,
//     pub qdata: *mut GData,
//     pub config: *mut GScannerConfig,
//     pub token: GTokenType,
//     pub value: GTokenValue,
//     pub line: guint,
//     pub position: guint,
//     pub next_token: GTokenType,
//     pub next_value: GTokenValue,
//     pub next_line: guint,
//     pub next_position: guint,
//     pub symbol_table: *mut GHashTable,
//     pub input_fd: gint,
//     pub text: *const gchar,
//     pub text_end: *const gchar,
//     pub buffer: *mut gchar,
//     pub scope_id: guint,
//     pub msg_handler: GScannerMsgFunc,
// }
// impl ::std::default::Default for _GScanner {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _GSequence { }
// pub type GSequence = _GSequence;
// pub enum _GSequenceNode { }
// pub type GSequenceIter = _GSequenceNode;
// pub type GSequenceIterCompareFunc =
//     ::std::option::Option<unsafe extern "C" fn(a: *mut GSequenceIter,
//                                                b: *mut GSequenceIter,
//                                                data: gpointer) -> gint>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GShellError {
//     G_SHELL_ERROR_BAD_QUOTING = 0,
//     G_SHELL_ERROR_EMPTY_STRING = 1,
//     G_SHELL_ERROR_FAILED = 2,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GSliceConfig {
//     G_SLICE_CONFIG_ALWAYS_MALLOC = 1,
//     G_SLICE_CONFIG_BYPASS_MAGAZINES = 2,
//     G_SLICE_CONFIG_WORKING_SET_MSECS = 3,
//     G_SLICE_CONFIG_COLOR_INCREMENT = 4,
//     G_SLICE_CONFIG_CHUNK_SIZES = 5,
//     G_SLICE_CONFIG_CONTENTION_COUNTER = 6,
// }
// pub const G_SPAWN_ERROR_2BIG: GSpawnError =
//     GSpawnError::G_SPAWN_ERROR_TOO_BIG;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GSpawnError {
//     G_SPAWN_ERROR_FORK = 0,
//     G_SPAWN_ERROR_READ = 1,
//     G_SPAWN_ERROR_CHDIR = 2,
//     G_SPAWN_ERROR_ACCES = 3,
//     G_SPAWN_ERROR_PERM = 4,
//     G_SPAWN_ERROR_TOO_BIG = 5,
//     G_SPAWN_ERROR_NOEXEC = 6,
//     G_SPAWN_ERROR_NAMETOOLONG = 7,
//     G_SPAWN_ERROR_NOENT = 8,
//     G_SPAWN_ERROR_NOMEM = 9,
//     G_SPAWN_ERROR_NOTDIR = 10,
//     G_SPAWN_ERROR_LOOP = 11,
//     G_SPAWN_ERROR_TXTBUSY = 12,
//     G_SPAWN_ERROR_IO = 13,
//     G_SPAWN_ERROR_NFILE = 14,
//     G_SPAWN_ERROR_MFILE = 15,
//     G_SPAWN_ERROR_INVAL = 16,
//     G_SPAWN_ERROR_ISDIR = 17,
//     G_SPAWN_ERROR_LIBBAD = 18,
//     G_SPAWN_ERROR_FAILED = 19,
// }
// pub type GSpawnChildSetupFunc =
//     ::std::option::Option<extern "C" fn(user_data: gpointer)>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GSpawnFlags {
//     G_SPAWN_DEFAULT = 0,
//     G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1,
//     G_SPAWN_DO_NOT_REAP_CHILD = 2,
//     G_SPAWN_SEARCH_PATH = 4,
//     G_SPAWN_STDOUT_TO_DEV_NULL = 8,
//     G_SPAWN_STDERR_TO_DEV_NULL = 16,
//     G_SPAWN_CHILD_INHERITS_STDIN = 32,
//     G_SPAWN_FILE_AND_ARGV_ZERO = 64,
//     G_SPAWN_SEARCH_PATH_FROM_ENVP = 128,
//     G_SPAWN_CLOEXEC_PIPES = 256,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GAsciiType {
//     G_ASCII_ALNUM = 1,
//     G_ASCII_ALPHA = 2,
//     G_ASCII_CNTRL = 4,
//     G_ASCII_DIGIT = 8,
//     G_ASCII_GRAPH = 16,
//     G_ASCII_LOWER = 32,
//     G_ASCII_PRINT = 64,
//     G_ASCII_PUNCT = 128,
//     G_ASCII_SPACE = 256,
//     G_ASCII_UPPER = 512,
//     G_ASCII_XDIGIT = 1024,
// }
// pub type GStrv = *mut *mut gchar;
// pub enum _GStringChunk { }
// pub type GStringChunk = _GStringChunk;
// pub enum GTestCase { }
// pub enum GTestSuite { }
// pub type GTestFunc = ::std::option::Option<extern "C" fn()>;
// pub type GTestDataFunc =
//     ::std::option::Option<extern "C" fn(user_data: gconstpointer)>;
// pub type GTestFixtureFunc =
//     ::std::option::Option<extern "C" fn(fixture: gpointer,
//                                         user_data: gconstpointer)>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GTestTrapFlags {
//     G_TEST_TRAP_SILENCE_STDOUT = 128,
//     G_TEST_TRAP_SILENCE_STDERR = 256,
//     G_TEST_TRAP_INHERIT_STDIN = 512,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GTestSubprocessFlags {
//     G_TEST_SUBPROCESS_INHERIT_STDIN = 1,
//     G_TEST_SUBPROCESS_INHERIT_STDOUT = 2,
//     G_TEST_SUBPROCESS_INHERIT_STDERR = 4,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct GTestConfig {
//     pub test_initialized: gboolean,
//     pub test_quick: gboolean,
//     pub test_perf: gboolean,
//     pub test_verbose: gboolean,
//     pub test_quiet: gboolean,
//     pub test_undefined: gboolean,
// }
// impl ::std::default::Default for GTestConfig {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GTestLogType {
//     G_TEST_LOG_NONE = 0,
//     G_TEST_LOG_ERROR = 1,
//     G_TEST_LOG_START_BINARY = 2,
//     G_TEST_LOG_LIST_CASE = 3,
//     G_TEST_LOG_SKIP_CASE = 4,
//     G_TEST_LOG_START_CASE = 5,
//     G_TEST_LOG_STOP_CASE = 6,
//     G_TEST_LOG_MIN_RESULT = 7,
//     G_TEST_LOG_MAX_RESULT = 8,
//     G_TEST_LOG_MESSAGE = 9,
//     G_TEST_LOG_START_SUITE = 10,
//     G_TEST_LOG_STOP_SUITE = 11,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct GTestLogMsg {
//     pub log_type: GTestLogType,
//     pub n_strings: guint,
//     pub strings: *mut *mut gchar,
//     pub n_nums: guint,
//     pub nums: *mut ::std::os::raw::c_double,
// }
// impl ::std::default::Default for GTestLogMsg {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct GTestLogBuffer {
//     pub data: *mut GString,
//     pub msgs: *mut GSList,
// }
// impl ::std::default::Default for GTestLogBuffer {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GTestLogFatalFunc =
//     ::std::option::Option<unsafe extern "C" fn(log_domain: *const gchar,
//                                                log_level: GLogLevelFlags,
//                                                message: *const gchar,
//                                                user_data: gpointer)
//                               -> gboolean>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GTestFileType { G_TEST_DIST = 0, G_TEST_BUILT = 1, }
// pub type GThreadPool = _GThreadPool;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GThreadPool {
//     pub func: GFunc,
//     pub user_data: gpointer,
//     pub exclusive: gboolean,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GThreadPool {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _GTimer { }
// pub type GTimer = _GTimer;
// pub type GTrashStack = _GTrashStack;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTrashStack {
//     pub next: *mut GTrashStack,
// }
// impl ::std::default::Default for _GTrashStack {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _GTree { }
// pub type GTree = _GTree;
// pub type GTraverseFunc =
//     ::std::option::Option<extern "C" fn(key: gpointer, value: gpointer,
//                                         data: gpointer) -> gboolean>;
// pub enum _GVariantType { }
// pub type GVariantType = _GVariantType;
// pub enum _GVariant { }
// pub type GVariant = _GVariant;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GVariantClass {
//     G_VARIANT_CLASS_BOOLEAN = 98,
//     G_VARIANT_CLASS_BYTE = 121,
//     G_VARIANT_CLASS_INT16 = 110,
//     G_VARIANT_CLASS_UINT16 = 113,
//     G_VARIANT_CLASS_INT32 = 105,
//     G_VARIANT_CLASS_UINT32 = 117,
//     G_VARIANT_CLASS_INT64 = 120,
//     G_VARIANT_CLASS_UINT64 = 116,
//     G_VARIANT_CLASS_HANDLE = 104,
//     G_VARIANT_CLASS_DOUBLE = 100,
//     G_VARIANT_CLASS_STRING = 115,
//     G_VARIANT_CLASS_OBJECT_PATH = 111,
//     G_VARIANT_CLASS_SIGNATURE = 103,
//     G_VARIANT_CLASS_VARIANT = 118,
//     G_VARIANT_CLASS_MAYBE = 109,
//     G_VARIANT_CLASS_ARRAY = 97,
//     G_VARIANT_CLASS_TUPLE = 40,
//     G_VARIANT_CLASS_DICT_ENTRY = 123,
// }
// pub type GVariantIter = _GVariantIter;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GVariantIter {
//     pub x: [gsize; 16usize],
// }
// impl ::std::default::Default for _GVariantIter {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GVariantBuilder = _GVariantBuilder;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GVariantBuilder {
//     pub x: [gsize; 16usize],
// }
// impl ::std::default::Default for _GVariantBuilder {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GVariantParseError {
//     G_VARIANT_PARSE_ERROR_FAILED = 0,
//     G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1,
//     G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2,
//     G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3,
//     G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4,
//     G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5,
//     G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6,
//     G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7,
//     G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8,
//     G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9,
//     G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10,
//     G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11,
//     G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12,
//     G_VARIANT_PARSE_ERROR_TYPE_ERROR = 13,
//     G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14,
//     G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15,
//     G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16,
//     G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17,
// }
// pub type GVariantDict = _GVariantDict;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GVariantDict {
//     pub x: [gsize; 16usize],
// }
// impl ::std::default::Default for _GVariantDict {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _GAllocator { }
// pub type GAllocator = _GAllocator;
// pub enum _GMemChunk { }
// pub type GMemChunk = _GMemChunk;
// pub enum _GCache { }
// pub type GCache = _GCache;
// pub type GCacheNewFunc =
//     ::std::option::Option<extern "C" fn(key: gpointer) -> gpointer>;
// pub type GCacheDupFunc =
//     ::std::option::Option<extern "C" fn(value: gpointer) -> gpointer>;
// pub type GCacheDestroyFunc =
//     ::std::option::Option<extern "C" fn(value: gpointer)>;
// pub type GCompletion = _GCompletion;
// pub type GCompletionFunc =
//     ::std::option::Option<extern "C" fn(arg1: gpointer) -> *mut gchar>;
// pub type GCompletionStrncmpFunc =
//     ::std::option::Option<unsafe extern "C" fn(s1: *const gchar,
//                                                s2: *const gchar, n: gsize)
//                               -> gint>;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GCompletion {
//     pub items: *mut GList,
//     pub func: GCompletionFunc,
//     pub prefix: *mut gchar,
//     pub cache: *mut GList,
//     pub strncmp_func: GCompletionStrncmpFunc,
// }
// impl ::std::default::Default for _GCompletion {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _GRelation { }
// pub type GRelation = _GRelation;
// pub type GTuples = _GTuples;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTuples {
//     pub len: guint,
// }
// impl ::std::default::Default for _GTuples {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GThreadPriority {
//     G_THREAD_PRIORITY_LOW = 0,
//     G_THREAD_PRIORITY_NORMAL = 1,
//     G_THREAD_PRIORITY_HIGH = 2,
//     G_THREAD_PRIORITY_URGENT = 3,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GThread {
//     pub func: GThreadFunc,
//     pub data: gpointer,
//     pub joinable: gboolean,
//     pub priority: GThreadPriority,
// }
// impl ::std::default::Default for _GThread {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GThreadFunctions = _GThreadFunctions;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GThreadFunctions {
//     pub mutex_new: ::std::option::Option<extern "C" fn() -> *mut GMutex>,
//     pub mutex_lock: ::std::option::Option<unsafe extern "C" fn(mutex:
//                                                                    *mut GMutex)>,
//     pub mutex_trylock: ::std::option::Option<unsafe extern "C" fn(mutex:
//                                                                       *mut GMutex)
//                                                  -> gboolean>,
//     pub mutex_unlock: ::std::option::Option<unsafe extern "C" fn(mutex:
//                                                                      *mut GMutex)>,
//     pub mutex_free: ::std::option::Option<unsafe extern "C" fn(mutex:
//                                                                    *mut GMutex)>,
//     pub cond_new: ::std::option::Option<extern "C" fn() -> *mut GCond>,
//     pub cond_signal: ::std::option::Option<unsafe extern "C" fn(cond:
//                                                                     *mut GCond)>,
//     pub cond_broadcast: ::std::option::Option<unsafe extern "C" fn(cond:
//                                                                        *mut GCond)>,
//     pub cond_wait: ::std::option::Option<unsafe extern "C" fn(cond:
//                                                                   *mut GCond,
//                                                               mutex:
//                                                                   *mut GMutex)>,
//     pub cond_timed_wait: ::std::option::Option<unsafe extern "C" fn(cond:
//                                                                         *mut GCond,
//                                                                     mutex:
//                                                                         *mut GMutex,
//                                                                     end_time:
//                                                                         *mut GTimeVal)
//                                                    -> gboolean>,
//     pub cond_free: ::std::option::Option<unsafe extern "C" fn(cond:
//                                                                   *mut GCond)>,
//     pub private_new: ::std::option::Option<extern "C" fn(destructor:
//                                                              GDestroyNotify)
//                                                -> *mut GPrivate>,
//     pub private_get: ::std::option::Option<unsafe extern "C" fn(private_key:
//                                                                     *mut GPrivate)
//                                                -> gpointer>,
//     pub private_set: ::std::option::Option<unsafe extern "C" fn(private_key:
//                                                                     *mut GPrivate,
//                                                                 data:
//                                                                     gpointer)>,
//     pub thread_create: ::std::option::Option<unsafe extern "C" fn(func:
//                                                                       GThreadFunc,
//                                                                   data:
//                                                                       gpointer,
//                                                                   stack_size:
//                                                                       gulong,
//                                                                   joinable:
//                                                                       gboolean,
//                                                                   bound:
//                                                                       gboolean,
//                                                                   priority:
//                                                                       GThreadPriority,
//                                                                   thread:
//                                                                       gpointer,
//                                                                   error:
//                                                                       *mut *mut GError)>,
//     pub thread_yield: ::std::option::Option<extern "C" fn()>,
//     pub thread_join: ::std::option::Option<extern "C" fn(thread: gpointer)>,
//     pub thread_exit: ::std::option::Option<extern "C" fn()>,
//     pub thread_set_priority: ::std::option::Option<extern "C" fn(thread:
//                                                                      gpointer,
//                                                                  priority:
//                                                                      GThreadPriority)>,
//     pub thread_self: ::std::option::Option<extern "C" fn(thread: gpointer)>,
//     pub thread_equal: ::std::option::Option<extern "C" fn(thread1: gpointer,
//                                                           thread2: gpointer)
//                                                 -> gboolean>,
// }
// impl ::std::default::Default for _GThreadFunctions {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type u_char = __u_char;
// pub type u_short = __u_short;
// pub type u_int = __u_int;
// pub type u_long = __u_long;
// pub type quad_t = __quad_t;
// pub type u_quad_t = __u_quad_t;
// pub type fsid_t = __fsid_t;
// pub type loff_t = __loff_t;
// pub type ino_t = __ino_t;
// pub type dev_t = __dev_t;
// pub type gid_t = __gid_t;
// pub type mode_t = __mode_t;
// pub type nlink_t = __nlink_t;
// pub type off_t = __off_t;
// pub type id_t = __id_t;
// pub type ssize_t = isize;
// pub type daddr_t = __daddr_t;
// pub type caddr_t = __caddr_t;
// pub type key_t = __key_t;
// pub type ulong = ::std::os::raw::c_ulong;
// pub type ushort = ::std::os::raw::c_ushort;
// pub type uint_ = ::std::os::raw::c_uint;
// pub type int8_t = i8;
// pub type int16_t = i16;
// pub type int32_t = i32;
// pub type int64_t = i64;
// pub type u_int8_t = ::std::os::raw::c_uchar;
// pub type u_int16_t = ::std::os::raw::c_ushort;
// pub type u_int32_t = ::std::os::raw::c_uint;
// pub type u_int64_t = ::std::os::raw::c_ulong;
// pub type register_t = ::std::os::raw::c_long;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct timeval {
//     pub tv_sec: __time_t,
//     pub tv_usec: __suseconds_t,
// }
// impl ::std::default::Default for timeval {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type suseconds_t = __suseconds_t;
// pub type __fd_mask = ::std::os::raw::c_long;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct fd_set {
//     pub __fds_bits: [__fd_mask; 16usize],
// }
// impl ::std::default::Default for fd_set {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type fd_mask = __fd_mask;
// pub type blksize_t = __blksize_t;
// pub type blkcnt_t = __blkcnt_t;
// pub type fsblkcnt_t = __fsblkcnt_t;
// pub type fsfilcnt_t = __fsfilcnt_t;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct sched_param {
//     pub __sched_priority: ::std::os::raw::c_int,
// }
// impl ::std::default::Default for sched_param {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct __sched_param {
//     pub __sched_priority: ::std::os::raw::c_int,
// }
// impl ::std::default::Default for __sched_param {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type __cpu_mask = ::std::os::raw::c_ulong;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct cpu_set_t {
//     pub __bits: [__cpu_mask; 16usize],
// }
// impl ::std::default::Default for cpu_set_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed27 {
//     PTHREAD_CREATE_JOINABLE = 0,
//     PTHREAD_CREATE_DETACHED = 1,
// }
// pub const PTHREAD_MUTEX_NORMAL: Enum_Unnamed28 =
//     Enum_Unnamed28::PTHREAD_MUTEX_TIMED_NP;
// pub const PTHREAD_MUTEX_RECURSIVE: Enum_Unnamed28 =
//     Enum_Unnamed28::PTHREAD_MUTEX_RECURSIVE_NP;
// pub const PTHREAD_MUTEX_ERRORCHECK: Enum_Unnamed28 =
//     Enum_Unnamed28::PTHREAD_MUTEX_ERRORCHECK_NP;
// pub const PTHREAD_MUTEX_DEFAULT: Enum_Unnamed28 =
//     Enum_Unnamed28::PTHREAD_MUTEX_TIMED_NP;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed28 {
//     PTHREAD_MUTEX_TIMED_NP = 0,
//     PTHREAD_MUTEX_RECURSIVE_NP = 1,
//     PTHREAD_MUTEX_ERRORCHECK_NP = 2,
//     PTHREAD_MUTEX_ADAPTIVE_NP = 3,
// }
// pub const PTHREAD_MUTEX_STALLED_NP: Enum_Unnamed29 =
//     Enum_Unnamed29::PTHREAD_MUTEX_STALLED;
// pub const PTHREAD_MUTEX_ROBUST_NP: Enum_Unnamed29 =
//     Enum_Unnamed29::PTHREAD_MUTEX_ROBUST;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed29 {
//     PTHREAD_MUTEX_STALLED = 0,
//     PTHREAD_MUTEX_ROBUST = 1,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed30 {
//     PTHREAD_PRIO_NONE = 0,
//     PTHREAD_PRIO_INHERIT = 1,
//     PTHREAD_PRIO_PROTECT = 2,
// }
// pub const PTHREAD_RWLOCK_DEFAULT_NP: Enum_Unnamed31 =
//     Enum_Unnamed31::PTHREAD_RWLOCK_PREFER_READER_NP;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed31 {
//     PTHREAD_RWLOCK_PREFER_READER_NP = 0,
//     PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
//     PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed32 {
//     PTHREAD_INHERIT_SCHED = 0,
//     PTHREAD_EXPLICIT_SCHED = 1,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed33 {
//     PTHREAD_SCOPE_SYSTEM = 0,
//     PTHREAD_SCOPE_PROCESS = 1,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed34 {
//     PTHREAD_PROCESS_PRIVATE = 0,
//     PTHREAD_PROCESS_SHARED = 1,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _pthread_cleanup_buffer {
//     pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
//                                                                   *mut ::std::os::raw::c_void)>,
//     pub __arg: *mut ::std::os::raw::c_void,
//     pub __canceltype: ::std::os::raw::c_int,
//     pub __prev: *mut _pthread_cleanup_buffer,
// }
// impl ::std::default::Default for _pthread_cleanup_buffer {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed35 {
//     PTHREAD_CANCEL_ENABLE = 0,
//     PTHREAD_CANCEL_DISABLE = 1,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum Enum_Unnamed36 {
//     PTHREAD_CANCEL_DEFERRED = 0,
//     PTHREAD_CANCEL_ASYNCHRONOUS = 1,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct __pthread_unwind_buf_t {
//     pub __cancel_jmp_buf: [Struct_Unnamed37; 1usize],
//     pub __pad: [*mut ::std::os::raw::c_void; 4usize],
// }
// impl ::std::default::Default for __pthread_unwind_buf_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed37 {
//     pub __cancel_jmp_buf: __jmp_buf,
//     pub __mask_was_saved: ::std::os::raw::c_int,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for Struct_Unnamed37 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct __pthread_cleanup_frame {
//     pub __cancel_routine: ::std::option::Option<unsafe extern "C" fn(arg1:
//                                                                          *mut ::std::os::raw::c_void)>,
//     pub __cancel_arg: *mut ::std::os::raw::c_void,
//     pub __do_it: ::std::os::raw::c_int,
//     pub __cancel_type: ::std::os::raw::c_int,
// }
// impl ::std::default::Default for __pthread_cleanup_frame {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum __jmp_buf_tag { }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct GStaticMutex {
//     pub mutex: *mut GMutex,
//     pub unused: pthread_mutex_t,
// }
// impl ::std::default::Default for GStaticMutex {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GStaticRecMutex = _GStaticRecMutex;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GStaticRecMutex {
//     pub mutex: GStaticMutex,
//     pub depth: guint,
//     pub unused: Union_Unnamed38,
// }
// impl ::std::default::Default for _GStaticRecMutex {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Union_Unnamed38 {
//     pub _bindgen_data_: [u64; 1usize],
// }
// impl Union_Unnamed38 {
//     pub unsafe fn owner(&mut self) -> *mut pthread_t {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn dummy(&mut self) -> *mut gdouble {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for Union_Unnamed38 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GStaticRWLock = _GStaticRWLock;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GStaticRWLock {
//     pub mutex: GStaticMutex,
//     pub read_cond: *mut GCond,
//     pub write_cond: *mut GCond,
//     pub read_counter: guint,
//     pub have_writer: gboolean,
//     pub want_to_read: guint,
//     pub want_to_write: guint,
// }
// impl ::std::default::Default for _GStaticRWLock {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GStaticPrivate = _GStaticPrivate;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GStaticPrivate {
//     pub index: guint,
// }
// impl ::std::default::Default for _GStaticPrivate {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GAsyncQueue_autoptr = *mut GAsyncQueue;
// pub type GBookmarkFile_autoptr = *mut GBookmarkFile;
// pub type GBytes_autoptr = *mut GBytes;
// pub type GChecksum_autoptr = *mut GChecksum;
// pub type GDateTime_autoptr = *mut GDateTime;
// pub type GDir_autoptr = *mut GDir;
// pub type GError_autoptr = *mut GError;
// pub type GHashTable_autoptr = *mut GHashTable;
// pub type GHmac_autoptr = *mut GHmac;
// pub type GIOChannel_autoptr = *mut GIOChannel;
// pub type GKeyFile_autoptr = *mut GKeyFile;
// pub type GList_autoptr = *mut GList;
// pub type GArray_autoptr = *mut GArray;
// pub type GPtrArray_autoptr = *mut GPtrArray;
// pub type GByteArray_autoptr = *mut GByteArray;
// pub type GMainContext_autoptr = *mut GMainContext;
// pub type GMainLoop_autoptr = *mut GMainLoop;
// pub type GSource_autoptr = *mut GSource;
// pub type GMappedFile_autoptr = *mut GMappedFile;
// pub type GMarkupParseContext_autoptr = *mut GMarkupParseContext;
// pub type GNode_autoptr = *mut GNode;
// pub type GOptionContext_autoptr = *mut GOptionContext;
// pub type GOptionGroup_autoptr = *mut GOptionGroup;
// pub type GPatternSpec_autoptr = *mut GPatternSpec;
// pub type GQueue_autoptr = *mut GQueue;
// pub type GRand_autoptr = *mut GRand;
// pub type GRegex_autoptr = *mut GRegex;
// pub type GMatchInfo_autoptr = *mut GMatchInfo;
// pub type GScanner_autoptr = *mut GScanner;
// pub type GSequence_autoptr = *mut GSequence;
// pub type GSList_autoptr = *mut GSList;
// pub type GString_autoptr = *mut GString;
// pub type GStringChunk_autoptr = *mut GStringChunk;
// pub type GThread_autoptr = *mut GThread;
// pub type GMutexLocker_autoptr = *mut GMutexLocker;
// pub type GTimer_autoptr = *mut GTimer;
// pub type GTimeZone_autoptr = *mut GTimeZone;
// pub type GTree_autoptr = *mut GTree;
// pub type GVariant_autoptr = *mut GVariant;
// pub type GVariantBuilder_autoptr = *mut GVariantBuilder;
// pub type GVariantIter_autoptr = *mut GVariantIter;
// pub type GVariantDict_autoptr = *mut GVariantDict;
// pub type GVariantType_autoptr = *mut GVariantType;
// pub enum _PangoCoverage { }
// pub type PangoCoverage = _PangoCoverage;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoCoverageLevel {
//     PANGO_COVERAGE_NONE = 0,
//     PANGO_COVERAGE_FALLBACK = 1,
//     PANGO_COVERAGE_APPROXIMATE = 2,
//     PANGO_COVERAGE_EXACT = 3,
// }
// pub type GValue = _GValue;
// pub enum _GTypeCValue { }
// pub type GTypeCValue = _GTypeCValue;
// pub enum _GTypePlugin { }
// pub type GTypePlugin = _GTypePlugin;
// pub type GTypeClass = _GTypeClass;
// pub type GTypeInterface = _GTypeInterface;
// pub type GTypeInstance = _GTypeInstance;
// pub type GTypeInfo = _GTypeInfo;
// pub type GTypeFundamentalInfo = _GTypeFundamentalInfo;
// pub type GInterfaceInfo = _GInterfaceInfo;
// pub type GTypeValueTable = _GTypeValueTable;
// pub type GTypeQuery = _GTypeQuery;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTypeClass {
//     pub g_type: GType,
// }
// impl ::std::default::Default for _GTypeClass {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTypeInstance {
//     pub g_class: *mut GTypeClass,
// }
// impl ::std::default::Default for _GTypeInstance {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTypeInterface {
//     pub g_type: GType,
//     pub g_instance_type: GType,
// }
// impl ::std::default::Default for _GTypeInterface {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTypeQuery {
//     pub type_: GType,
//     pub type_name: *const gchar,
//     pub class_size: guint,
//     pub instance_size: guint,
// }
// impl ::std::default::Default for _GTypeQuery {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GTypeDebugFlags {
//     G_TYPE_DEBUG_NONE = 0,
//     G_TYPE_DEBUG_OBJECTS = 1,
//     G_TYPE_DEBUG_SIGNALS = 2,
//     G_TYPE_DEBUG_INSTANCE_COUNT = 4,
//     G_TYPE_DEBUG_MASK = 7,
// }
// pub type GBaseInitFunc =
//     ::std::option::Option<extern "C" fn(g_class: gpointer)>;
// pub type GBaseFinalizeFunc =
//     ::std::option::Option<extern "C" fn(g_class: gpointer)>;
// pub type GClassInitFunc =
//     ::std::option::Option<extern "C" fn(g_class: gpointer,
//                                         class_data: gpointer)>;
// pub type GClassFinalizeFunc =
//     ::std::option::Option<extern "C" fn(g_class: gpointer,
//                                         class_data: gpointer)>;
// pub type GInstanceInitFunc =
//     ::std::option::Option<unsafe extern "C" fn(instance: *mut GTypeInstance,
//                                                g_class: gpointer)>;
// pub type GInterfaceInitFunc =
//     ::std::option::Option<extern "C" fn(g_iface: gpointer,
//                                         iface_data: gpointer)>;
// pub type GInterfaceFinalizeFunc =
//     ::std::option::Option<extern "C" fn(g_iface: gpointer,
//                                         iface_data: gpointer)>;
// pub type GTypeClassCacheFunc =
//     ::std::option::Option<unsafe extern "C" fn(cache_data: gpointer,
//                                                g_class: *mut GTypeClass)
//                               -> gboolean>;
// pub type GTypeInterfaceCheckFunc =
//     ::std::option::Option<extern "C" fn(check_data: gpointer,
//                                         g_iface: gpointer)>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GTypeFundamentalFlags {
//     G_TYPE_FLAG_CLASSED = 1,
//     G_TYPE_FLAG_INSTANTIATABLE = 2,
//     G_TYPE_FLAG_DERIVABLE = 4,
//     G_TYPE_FLAG_DEEP_DERIVABLE = 8,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GTypeFlags {
//     G_TYPE_FLAG_ABSTRACT = 16,
//     G_TYPE_FLAG_VALUE_ABSTRACT = 32,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTypeInfo {
//     pub class_size: guint16,
//     pub base_init: GBaseInitFunc,
//     pub base_finalize: GBaseFinalizeFunc,
//     pub class_init: GClassInitFunc,
//     pub class_finalize: GClassFinalizeFunc,
//     pub class_data: gconstpointer,
//     pub instance_size: guint16,
//     pub n_preallocs: guint16,
//     pub instance_init: GInstanceInitFunc,
//     pub value_table: *const GTypeValueTable,
// }
// impl ::std::default::Default for _GTypeInfo {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTypeFundamentalInfo {
//     pub type_flags: GTypeFundamentalFlags,
// }
// impl ::std::default::Default for _GTypeFundamentalInfo {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GInterfaceInfo {
//     pub interface_init: GInterfaceInitFunc,
//     pub interface_finalize: GInterfaceFinalizeFunc,
//     pub interface_data: gpointer,
// }
// impl ::std::default::Default for _GInterfaceInfo {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTypeValueTable {
//     pub value_init: ::std::option::Option<unsafe extern "C" fn(value:
//                                                                    *mut GValue)>,
//     pub value_free: ::std::option::Option<unsafe extern "C" fn(value:
//                                                                    *mut GValue)>,
//     pub value_copy: ::std::option::Option<unsafe extern "C" fn(src_value:
//                                                                    *const GValue,
//                                                                dest_value:
//                                                                    *mut GValue)>,
//     pub value_peek_pointer: ::std::option::Option<unsafe extern "C" fn(value:
//                                                                            *const GValue)
//                                                       -> gpointer>,
//     pub collect_format: *const gchar,
//     pub collect_value: ::std::option::Option<unsafe extern "C" fn(value:
//                                                                       *mut GValue,
//                                                                   n_collect_values:
//                                                                       guint,
//                                                                   collect_values:
//                                                                       *mut GTypeCValue,
//                                                                   collect_flags:
//                                                                       guint)
//                                                  -> *mut gchar>,
//     pub lcopy_format: *const gchar,
//     pub lcopy_value: ::std::option::Option<unsafe extern "C" fn(value:
//                                                                     *const GValue,
//                                                                 n_collect_values:
//                                                                     guint,
//                                                                 collect_values:
//                                                                     *mut GTypeCValue,
//                                                                 collect_flags:
//                                                                     guint)
//                                                -> *mut gchar>,
// }
// impl ::std::default::Default for _GTypeValueTable {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GValueTransform =
//     ::std::option::Option<unsafe extern "C" fn(src_value: *const GValue,
//                                                dest_value: *mut GValue)>;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GValue {
//     pub g_type: GType,
//     pub data: [Union_Unnamed39; 2usize],
// }
// impl ::std::default::Default for _GValue {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Union_Unnamed39 {
//     pub _bindgen_data_: [u64; 1usize],
// }
// impl Union_Unnamed39 {
//     pub unsafe fn v_int(&mut self) -> *mut gint {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_uint(&mut self) -> *mut guint {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_long(&mut self) -> *mut glong {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_ulong(&mut self) -> *mut gulong {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_int64(&mut self) -> *mut gint64 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_uint64(&mut self) -> *mut guint64 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_float(&mut self) -> *mut gfloat {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_double(&mut self) -> *mut gdouble {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn v_pointer(&mut self) -> *mut gpointer {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for Union_Unnamed39 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub const G_PARAM_PRIVATE: GParamFlags = GParamFlags::G_PARAM_STATIC_NAME;
// #[derive(Copy, Clone)]
// #[repr(i32)]
// #[derive(Debug)]
// pub enum GParamFlags {
//     G_PARAM_READABLE = 1,
//     G_PARAM_WRITABLE = 2,
//     G_PARAM_READWRITE = 3,
//     G_PARAM_CONSTRUCT = 4,
//     G_PARAM_CONSTRUCT_ONLY = 8,
//     G_PARAM_LAX_VALIDATION = 16,
//     G_PARAM_STATIC_NAME = 32,
//     G_PARAM_STATIC_NICK = 64,
//     G_PARAM_STATIC_BLURB = 128,
//     G_PARAM_EXPLICIT_NOTIFY = 1073741824,
//     G_PARAM_DEPRECATED = -2147483648,
// }
// pub type GParamSpec = _GParamSpec;
// pub type GParamSpecClass = _GParamSpecClass;
// pub type GParameter = _GParameter;
// pub enum _GParamSpecPool { }
// pub type GParamSpecPool = _GParamSpecPool;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpec {
//     pub g_type_instance: GTypeInstance,
//     pub name: *const gchar,
//     pub flags: GParamFlags,
//     pub value_type: GType,
//     pub owner_type: GType,
//     pub _nick: *mut gchar,
//     pub _blurb: *mut gchar,
//     pub qdata: *mut GData,
//     pub ref_count: guint,
//     pub param_id: guint,
// }
// impl ::std::default::Default for _GParamSpec {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecClass {
//     pub g_type_class: GTypeClass,
//     pub value_type: GType,
//     pub finalize: ::std::option::Option<unsafe extern "C" fn(pspec:
//                                                                  *mut GParamSpec)>,
//     pub value_set_default: ::std::option::Option<unsafe extern "C" fn(pspec:
//                                                                           *mut GParamSpec,
//                                                                       value:
//                                                                           *mut GValue)>,
//     pub value_validate: ::std::option::Option<unsafe extern "C" fn(pspec:
//                                                                        *mut GParamSpec,
//                                                                    value:
//                                                                        *mut GValue)
//                                                   -> gboolean>,
//     pub values_cmp: ::std::option::Option<unsafe extern "C" fn(pspec:
//                                                                    *mut GParamSpec,
//                                                                value1:
//                                                                    *const GValue,
//                                                                value2:
//                                                                    *const GValue)
//                                               -> gint>,
//     pub dummy: [gpointer; 4usize],
// }
// impl ::std::default::Default for _GParamSpecClass {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParameter {
//     pub name: *const gchar,
//     pub value: GValue,
// }
// impl ::std::default::Default for _GParameter {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GParamSpecTypeInfo = _GParamSpecTypeInfo;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecTypeInfo {
//     pub instance_size: guint16,
//     pub n_preallocs: guint16,
//     pub instance_init: ::std::option::Option<unsafe extern "C" fn(pspec:
//                                                                       *mut GParamSpec)>,
//     pub value_type: GType,
//     pub finalize: ::std::option::Option<unsafe extern "C" fn(pspec:
//                                                                  *mut GParamSpec)>,
//     pub value_set_default: ::std::option::Option<unsafe extern "C" fn(pspec:
//                                                                           *mut GParamSpec,
//                                                                       value:
//                                                                           *mut GValue)>,
//     pub value_validate: ::std::option::Option<unsafe extern "C" fn(pspec:
//                                                                        *mut GParamSpec,
//                                                                    value:
//                                                                        *mut GValue)
//                                                   -> gboolean>,
//     pub values_cmp: ::std::option::Option<unsafe extern "C" fn(pspec:
//                                                                    *mut GParamSpec,
//                                                                value1:
//                                                                    *const GValue,
//                                                                value2:
//                                                                    *const GValue)
//                                               -> gint>,
// }
// impl ::std::default::Default for _GParamSpecTypeInfo {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GClosure = _GClosure;
// pub type GClosureNotifyData = _GClosureNotifyData;
// pub type GCallback = ::std::option::Option<extern "C" fn()>;
// pub type GClosureNotify =
//     ::std::option::Option<unsafe extern "C" fn(data: gpointer,
//                                                closure: *mut GClosure)>;
// pub type GClosureMarshal =
//     ::std::option::Option<unsafe extern "C" fn(closure: *mut GClosure,
//                                                return_value: *mut GValue,
//                                                n_param_values: guint,
//                                                param_values: *const GValue,
//                                                invocation_hint: gpointer,
//                                                marshal_data: gpointer)>;
// pub type GVaClosureMarshal =
//     ::std::option::Option<unsafe extern "C" fn(closure: *mut GClosure,
//                                                return_value: *mut GValue,
//                                                instance: gpointer,
//                                                args: va_list,
//                                                marshal_data: gpointer,
//                                                n_params:
//                                                    ::std::os::raw::c_int,
//                                                param_types: *mut GType)>;
// pub type GCClosure = _GCClosure;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GClosureNotifyData {
//     pub data: gpointer,
//     pub notify: GClosureNotify,
// }
// impl ::std::default::Default for _GClosureNotifyData {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GClosure {
//     pub _bindgen_bitfield_1_: guint,
//     pub _bindgen_bitfield_2_: guint,
//     pub _bindgen_bitfield_3_: guint,
//     pub _bindgen_bitfield_4_: guint,
//     pub _bindgen_bitfield_5_: guint,
//     pub _bindgen_bitfield_6_: guint,
//     pub _bindgen_bitfield_7_: guint,
//     pub _bindgen_bitfield_8_: guint,
//     pub _bindgen_bitfield_9_: guint,
//     pub _bindgen_bitfield_10_: guint,
//     pub marshal: ::std::option::Option<unsafe extern "C" fn(closure:
//                                                                 *mut GClosure,
//                                                             return_value:
//                                                                 *mut GValue,
//                                                             n_param_values:
//                                                                 guint,
//                                                             param_values:
//                                                                 *const GValue,
//                                                             invocation_hint:
//                                                                 gpointer,
//                                                             marshal_data:
//                                                                 gpointer)>,
//     pub data: gpointer,
//     pub notifiers: *mut GClosureNotifyData,
// }
// impl ::std::default::Default for _GClosure {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GCClosure {
//     pub closure: GClosure,
//     pub callback: gpointer,
// }
// impl ::std::default::Default for _GCClosure {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GSignalQuery = _GSignalQuery;
// pub type GSignalInvocationHint = _GSignalInvocationHint;
// pub type GSignalCMarshaller = GClosureMarshal;
// pub type GSignalCVaMarshaller = GVaClosureMarshal;
// pub type GSignalEmissionHook =
//     ::std::option::Option<unsafe extern "C" fn(ihint:
//                                                    *mut GSignalInvocationHint,
//                                                n_param_values: guint,
//                                                param_values: *const GValue,
//                                                data: gpointer) -> gboolean>;
// pub type GSignalAccumulator =
//     ::std::option::Option<unsafe extern "C" fn(ihint:
//                                                    *mut GSignalInvocationHint,
//                                                return_accu: *mut GValue,
//                                                handler_return: *const GValue,
//                                                data: gpointer) -> gboolean>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GSignalFlags {
//     G_SIGNAL_RUN_FIRST = 1,
//     G_SIGNAL_RUN_LAST = 2,
//     G_SIGNAL_RUN_CLEANUP = 4,
//     G_SIGNAL_NO_RECURSE = 8,
//     G_SIGNAL_DETAILED = 16,
//     G_SIGNAL_ACTION = 32,
//     G_SIGNAL_NO_HOOKS = 64,
//     G_SIGNAL_MUST_COLLECT = 128,
//     G_SIGNAL_DEPRECATED = 256,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GConnectFlags { G_CONNECT_AFTER = 1, G_CONNECT_SWAPPED = 2, }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GSignalMatchType {
//     G_SIGNAL_MATCH_ID = 1,
//     G_SIGNAL_MATCH_DETAIL = 2,
//     G_SIGNAL_MATCH_CLOSURE = 4,
//     G_SIGNAL_MATCH_FUNC = 8,
//     G_SIGNAL_MATCH_DATA = 16,
//     G_SIGNAL_MATCH_UNBLOCKED = 32,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GSignalInvocationHint {
//     pub signal_id: guint,
//     pub detail: GQuark,
//     pub run_type: GSignalFlags,
// }
// impl ::std::default::Default for _GSignalInvocationHint {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GSignalQuery {
//     pub signal_id: guint,
//     pub signal_name: *const gchar,
//     pub itype: GType,
//     pub signal_flags: GSignalFlags,
//     pub return_type: GType,
//     pub n_params: guint,
//     pub param_types: *const GType,
// }
// impl ::std::default::Default for _GSignalQuery {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GBoxedCopyFunc =
//     ::std::option::Option<extern "C" fn(boxed: gpointer) -> gpointer>;
// pub type GBoxedFreeFunc =
//     ::std::option::Option<extern "C" fn(boxed: gpointer)>;
// pub type GObject = _GObject;
// pub type GObjectClass = _GObjectClass;
// pub type GInitiallyUnowned = _GObject;
// pub type GInitiallyUnownedClass = _GObjectClass;
// pub type GObjectConstructParam = _GObjectConstructParam;
// pub type GObjectGetPropertyFunc =
//     ::std::option::Option<unsafe extern "C" fn(object: *mut GObject,
//                                                property_id: guint,
//                                                value: *mut GValue,
//                                                pspec: *mut GParamSpec)>;
// pub type GObjectSetPropertyFunc =
//     ::std::option::Option<unsafe extern "C" fn(object: *mut GObject,
//                                                property_id: guint,
//                                                value: *const GValue,
//                                                pspec: *mut GParamSpec)>;
// pub type GObjectFinalizeFunc =
//     ::std::option::Option<unsafe extern "C" fn(object: *mut GObject)>;
// pub type GWeakNotify =
//     ::std::option::Option<unsafe extern "C" fn(data: gpointer,
//                                                where_the_object_was:
//                                                    *mut GObject)>;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GObject {
//     pub g_type_instance: GTypeInstance,
//     pub ref_count: guint,
//     pub qdata: *mut GData,
// }
// impl ::std::default::Default for _GObject {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GObjectClass {
//     pub g_type_class: GTypeClass,
//     pub construct_properties: *mut GSList,
//     pub constructor: ::std::option::Option<unsafe extern "C" fn(type_: GType,
//                                                                 n_construct_properties:
//                                                                     guint,
//                                                                 construct_properties:
//                                                                     *mut GObjectConstructParam)
//                                                -> *mut GObject>,
//     pub set_property: ::std::option::Option<unsafe extern "C" fn(object:
//                                                                      *mut GObject,
//                                                                  property_id:
//                                                                      guint,
//                                                                  value:
//                                                                      *const GValue,
//                                                                  pspec:
//                                                                      *mut GParamSpec)>,
//     pub get_property: ::std::option::Option<unsafe extern "C" fn(object:
//                                                                      *mut GObject,
//                                                                  property_id:
//                                                                      guint,
//                                                                  value:
//                                                                      *mut GValue,
//                                                                  pspec:
//                                                                      *mut GParamSpec)>,
//     pub dispose: ::std::option::Option<unsafe extern "C" fn(object:
//                                                                 *mut GObject)>,
//     pub finalize: ::std::option::Option<unsafe extern "C" fn(object:
//                                                                  *mut GObject)>,
//     pub dispatch_properties_changed: ::std::option::Option<unsafe extern "C" fn(object:
//                                                                                     *mut GObject,
//                                                                                 n_pspecs:
//                                                                                     guint,
//                                                                                 pspecs:
//                                                                                     *mut *mut GParamSpec)>,
//     pub notify: ::std::option::Option<unsafe extern "C" fn(object:
//                                                                *mut GObject,
//                                                            pspec:
//                                                                *mut GParamSpec)>,
//     pub constructed: ::std::option::Option<unsafe extern "C" fn(object:
//                                                                     *mut GObject)>,
//     pub flags: gsize,
//     pub pdummy: [gpointer; 6usize],
// }
// impl ::std::default::Default for _GObjectClass {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GObjectConstructParam {
//     pub pspec: *mut GParamSpec,
//     pub value: *mut GValue,
// }
// impl ::std::default::Default for _GObjectConstructParam {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GToggleNotify =
//     ::std::option::Option<unsafe extern "C" fn(data: gpointer,
//                                                object: *mut GObject,
//                                                is_last_ref: gboolean)>;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct GWeakRef {
//     pub priv_: Union_Unnamed40,
// }
// impl ::std::default::Default for GWeakRef {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Union_Unnamed40 {
//     pub _bindgen_data_: [u64; 1usize],
// }
// impl Union_Unnamed40 {
//     pub unsafe fn p(&mut self) -> *mut gpointer {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for Union_Unnamed40 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _GBinding { }
// pub type GBinding = _GBinding;
// pub type GBindingTransformFunc =
//     ::std::option::Option<unsafe extern "C" fn(binding: *mut GBinding,
//                                                from_value: *const GValue,
//                                                to_value: *mut GValue,
//                                                user_data: gpointer)
//                               -> gboolean>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum GBindingFlags {
//     G_BINDING_DEFAULT = 0,
//     G_BINDING_BIDIRECTIONAL = 1,
//     G_BINDING_SYNC_CREATE = 2,
//     G_BINDING_INVERT_BOOLEAN = 4,
// }
// pub type GEnumClass = _GEnumClass;
// pub type GFlagsClass = _GFlagsClass;
// pub type GEnumValue = _GEnumValue;
// pub type GFlagsValue = _GFlagsValue;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GEnumClass {
//     pub g_type_class: GTypeClass,
//     pub minimum: gint,
//     pub maximum: gint,
//     pub n_values: guint,
//     pub values: *mut GEnumValue,
// }
// impl ::std::default::Default for _GEnumClass {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GFlagsClass {
//     pub g_type_class: GTypeClass,
//     pub mask: guint,
//     pub n_values: guint,
//     pub values: *mut GFlagsValue,
// }
// impl ::std::default::Default for _GFlagsClass {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GEnumValue {
//     pub value: gint,
//     pub value_name: *const gchar,
//     pub value_nick: *const gchar,
// }
// impl ::std::default::Default for _GEnumValue {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GFlagsValue {
//     pub value: guint,
//     pub value_name: *const gchar,
//     pub value_nick: *const gchar,
// }
// impl ::std::default::Default for _GFlagsValue {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GParamSpecChar = _GParamSpecChar;
// pub type GParamSpecUChar = _GParamSpecUChar;
// pub type GParamSpecBoolean = _GParamSpecBoolean;
// pub type GParamSpecInt = _GParamSpecInt;
// pub type GParamSpecUInt = _GParamSpecUInt;
// pub type GParamSpecLong = _GParamSpecLong;
// pub type GParamSpecULong = _GParamSpecULong;
// pub type GParamSpecInt64 = _GParamSpecInt64;
// pub type GParamSpecUInt64 = _GParamSpecUInt64;
// pub type GParamSpecUnichar = _GParamSpecUnichar;
// pub type GParamSpecEnum = _GParamSpecEnum;
// pub type GParamSpecFlags = _GParamSpecFlags;
// pub type GParamSpecFloat = _GParamSpecFloat;
// pub type GParamSpecDouble = _GParamSpecDouble;
// pub type GParamSpecString = _GParamSpecString;
// pub type GParamSpecParam = _GParamSpecParam;
// pub type GParamSpecBoxed = _GParamSpecBoxed;
// pub type GParamSpecPointer = _GParamSpecPointer;
// pub type GParamSpecValueArray = _GParamSpecValueArray;
// pub type GParamSpecObject = _GParamSpecObject;
// pub type GParamSpecOverride = _GParamSpecOverride;
// pub type GParamSpecGType = _GParamSpecGType;
// pub type GParamSpecVariant = _GParamSpecVariant;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecChar {
//     pub parent_instance: GParamSpec,
//     pub minimum: gint8,
//     pub maximum: gint8,
//     pub default_value: gint8,
//     _bindgen_padding_0_: [u8; 5usize],
// }
// impl ::std::default::Default for _GParamSpecChar {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecUChar {
//     pub parent_instance: GParamSpec,
//     pub minimum: guint8,
//     pub maximum: guint8,
//     pub default_value: guint8,
//     _bindgen_padding_0_: [u8; 5usize],
// }
// impl ::std::default::Default for _GParamSpecUChar {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecBoolean {
//     pub parent_instance: GParamSpec,
//     pub default_value: gboolean,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GParamSpecBoolean {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecInt {
//     pub parent_instance: GParamSpec,
//     pub minimum: gint,
//     pub maximum: gint,
//     pub default_value: gint,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GParamSpecInt {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecUInt {
//     pub parent_instance: GParamSpec,
//     pub minimum: guint,
//     pub maximum: guint,
//     pub default_value: guint,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GParamSpecUInt {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecLong {
//     pub parent_instance: GParamSpec,
//     pub minimum: glong,
//     pub maximum: glong,
//     pub default_value: glong,
// }
// impl ::std::default::Default for _GParamSpecLong {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecULong {
//     pub parent_instance: GParamSpec,
//     pub minimum: gulong,
//     pub maximum: gulong,
//     pub default_value: gulong,
// }
// impl ::std::default::Default for _GParamSpecULong {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecInt64 {
//     pub parent_instance: GParamSpec,
//     pub minimum: gint64,
//     pub maximum: gint64,
//     pub default_value: gint64,
// }
// impl ::std::default::Default for _GParamSpecInt64 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecUInt64 {
//     pub parent_instance: GParamSpec,
//     pub minimum: guint64,
//     pub maximum: guint64,
//     pub default_value: guint64,
// }
// impl ::std::default::Default for _GParamSpecUInt64 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecUnichar {
//     pub parent_instance: GParamSpec,
//     pub default_value: gunichar,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GParamSpecUnichar {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecEnum {
//     pub parent_instance: GParamSpec,
//     pub enum_class: *mut GEnumClass,
//     pub default_value: gint,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GParamSpecEnum {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecFlags {
//     pub parent_instance: GParamSpec,
//     pub flags_class: *mut GFlagsClass,
//     pub default_value: guint,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GParamSpecFlags {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecFloat {
//     pub parent_instance: GParamSpec,
//     pub minimum: gfloat,
//     pub maximum: gfloat,
//     pub default_value: gfloat,
//     pub epsilon: gfloat,
// }
// impl ::std::default::Default for _GParamSpecFloat {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecDouble {
//     pub parent_instance: GParamSpec,
//     pub minimum: gdouble,
//     pub maximum: gdouble,
//     pub default_value: gdouble,
//     pub epsilon: gdouble,
// }
// impl ::std::default::Default for _GParamSpecDouble {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecString {
//     pub parent_instance: GParamSpec,
//     pub default_value: *mut gchar,
//     pub cset_first: *mut gchar,
//     pub cset_nth: *mut gchar,
//     pub substitutor: gchar,
//     pub _bindgen_bitfield_1_: guint,
//     pub _bindgen_bitfield_2_: guint,
// }
// impl ::std::default::Default for _GParamSpecString {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecParam {
//     pub parent_instance: GParamSpec,
// }
// impl ::std::default::Default for _GParamSpecParam {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecBoxed {
//     pub parent_instance: GParamSpec,
// }
// impl ::std::default::Default for _GParamSpecBoxed {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecPointer {
//     pub parent_instance: GParamSpec,
// }
// impl ::std::default::Default for _GParamSpecPointer {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecValueArray {
//     pub parent_instance: GParamSpec,
//     pub element_spec: *mut GParamSpec,
//     pub fixed_n_elements: guint,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GParamSpecValueArray {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecObject {
//     pub parent_instance: GParamSpec,
// }
// impl ::std::default::Default for _GParamSpecObject {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecOverride {
//     pub parent_instance: GParamSpec,
//     pub overridden: *mut GParamSpec,
// }
// impl ::std::default::Default for _GParamSpecOverride {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecGType {
//     pub parent_instance: GParamSpec,
//     pub is_a_type: GType,
// }
// impl ::std::default::Default for _GParamSpecGType {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GParamSpecVariant {
//     pub parent_instance: GParamSpec,
//     pub type_: *mut GVariantType,
//     pub default_value: *mut GVariant,
//     pub padding: [gpointer; 4usize],
// }
// impl ::std::default::Default for _GParamSpecVariant {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GTypeModule = _GTypeModule;
// pub type GTypeModuleClass = _GTypeModuleClass;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTypeModule {
//     pub parent_instance: GObject,
//     pub use_count: guint,
//     pub type_infos: *mut GSList,
//     pub interface_infos: *mut GSList,
//     pub name: *mut gchar,
// }
// impl ::std::default::Default for _GTypeModule {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTypeModuleClass {
//     pub parent_class: GObjectClass,
//     pub load: ::std::option::Option<unsafe extern "C" fn(module:
//                                                              *mut GTypeModule)
//                                         -> gboolean>,
//     pub unload: ::std::option::Option<unsafe extern "C" fn(module:
//                                                                *mut GTypeModule)>,
//     pub reserved1: ::std::option::Option<extern "C" fn()>,
//     pub reserved2: ::std::option::Option<extern "C" fn()>,
//     pub reserved3: ::std::option::Option<extern "C" fn()>,
//     pub reserved4: ::std::option::Option<extern "C" fn()>,
// }
// impl ::std::default::Default for _GTypeModuleClass {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GTypePluginClass = _GTypePluginClass;
// pub type GTypePluginUse =
//     ::std::option::Option<unsafe extern "C" fn(plugin: *mut GTypePlugin)>;
// pub type GTypePluginUnuse =
//     ::std::option::Option<unsafe extern "C" fn(plugin: *mut GTypePlugin)>;
// pub type GTypePluginCompleteTypeInfo =
//     ::std::option::Option<unsafe extern "C" fn(plugin: *mut GTypePlugin,
//                                                g_type: GType,
//                                                info: *mut GTypeInfo,
//                                                value_table:
//                                                    *mut GTypeValueTable)>;
// pub type GTypePluginCompleteInterfaceInfo =
//     ::std::option::Option<unsafe extern "C" fn(plugin: *mut GTypePlugin,
//                                                instance_type: GType,
//                                                interface_type: GType,
//                                                info: *mut GInterfaceInfo)>;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GTypePluginClass {
//     pub base_iface: GTypeInterface,
//     pub use_plugin: GTypePluginUse,
//     pub unuse_plugin: GTypePluginUnuse,
//     pub complete_type_info: GTypePluginCompleteTypeInfo,
//     pub complete_interface_info: GTypePluginCompleteInterfaceInfo,
// }
// impl ::std::default::Default for _GTypePluginClass {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type GValueArray = _GValueArray;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _GValueArray {
//     pub n_values: guint,
//     pub values: *mut GValue,
//     pub n_prealloced: guint,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _GValueArray {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type gchararray = *mut gchar;
// pub type GObject_autoptr = *mut GObject;
// pub type GInitiallyUnowned_autoptr = *mut GInitiallyUnowned;
// pub type PangoLogAttr = _PangoLogAttr;
// pub enum _PangoEngineLang { }
// pub type PangoEngineLang = _PangoEngineLang;
// pub enum _PangoEngineShape { }
// pub type PangoEngineShape = _PangoEngineShape;
// pub enum _PangoFont { }
// pub type PangoFont = _PangoFont;
// pub type PangoRectangle = _PangoRectangle;
// pub type PangoGlyph = guint32;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoRectangle {
//     pub x: ::std::os::raw::c_int,
//     pub y: ::std::os::raw::c_int,
//     pub width: ::std::os::raw::c_int,
//     pub height: ::std::os::raw::c_int,
// }
// impl ::std::default::Default for _PangoRectangle {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoGravity {
//     PANGO_GRAVITY_SOUTH = 0,
//     PANGO_GRAVITY_EAST = 1,
//     PANGO_GRAVITY_NORTH = 2,
//     PANGO_GRAVITY_WEST = 3,
//     PANGO_GRAVITY_AUTO = 4,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoGravityHint {
//     PANGO_GRAVITY_HINT_NATURAL = 0,
//     PANGO_GRAVITY_HINT_STRONG = 1,
//     PANGO_GRAVITY_HINT_LINE = 2,
// }
// pub type PangoMatrix = _PangoMatrix;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoMatrix {
//     pub xx: ::std::os::raw::c_double,
//     pub xy: ::std::os::raw::c_double,
//     pub yx: ::std::os::raw::c_double,
//     pub yy: ::std::os::raw::c_double,
//     pub x0: ::std::os::raw::c_double,
//     pub y0: ::std::os::raw::c_double,
// }
// impl ::std::default::Default for _PangoMatrix {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _PangoScriptIter { }
// pub type PangoScriptIter = _PangoScriptIter;
// #[derive(Copy, Clone)]
// #[repr(i32)]
// #[derive(Debug)]
// pub enum PangoScript {
//     PANGO_SCRIPT_INVALID_CODE = -1,
//     PANGO_SCRIPT_COMMON = 0,
//     PANGO_SCRIPT_INHERITED = 1,
//     PANGO_SCRIPT_ARABIC = 2,
//     PANGO_SCRIPT_ARMENIAN = 3,
//     PANGO_SCRIPT_BENGALI = 4,
//     PANGO_SCRIPT_BOPOMOFO = 5,
//     PANGO_SCRIPT_CHEROKEE = 6,
//     PANGO_SCRIPT_COPTIC = 7,
//     PANGO_SCRIPT_CYRILLIC = 8,
//     PANGO_SCRIPT_DESERET = 9,
//     PANGO_SCRIPT_DEVANAGARI = 10,
//     PANGO_SCRIPT_ETHIOPIC = 11,
//     PANGO_SCRIPT_GEORGIAN = 12,
//     PANGO_SCRIPT_GOTHIC = 13,
//     PANGO_SCRIPT_GREEK = 14,
//     PANGO_SCRIPT_GUJARATI = 15,
//     PANGO_SCRIPT_GURMUKHI = 16,
//     PANGO_SCRIPT_HAN = 17,
//     PANGO_SCRIPT_HANGUL = 18,
//     PANGO_SCRIPT_HEBREW = 19,
//     PANGO_SCRIPT_HIRAGANA = 20,
//     PANGO_SCRIPT_KANNADA = 21,
//     PANGO_SCRIPT_KATAKANA = 22,
//     PANGO_SCRIPT_KHMER = 23,
//     PANGO_SCRIPT_LAO = 24,
//     PANGO_SCRIPT_LATIN = 25,
//     PANGO_SCRIPT_MALAYALAM = 26,
//     PANGO_SCRIPT_MONGOLIAN = 27,
//     PANGO_SCRIPT_MYANMAR = 28,
//     PANGO_SCRIPT_OGHAM = 29,
//     PANGO_SCRIPT_OLD_ITALIC = 30,
//     PANGO_SCRIPT_ORIYA = 31,
//     PANGO_SCRIPT_RUNIC = 32,
//     PANGO_SCRIPT_SINHALA = 33,
//     PANGO_SCRIPT_SYRIAC = 34,
//     PANGO_SCRIPT_TAMIL = 35,
//     PANGO_SCRIPT_TELUGU = 36,
//     PANGO_SCRIPT_THAANA = 37,
//     PANGO_SCRIPT_THAI = 38,
//     PANGO_SCRIPT_TIBETAN = 39,
//     PANGO_SCRIPT_CANADIAN_ABORIGINAL = 40,
//     PANGO_SCRIPT_YI = 41,
//     PANGO_SCRIPT_TAGALOG = 42,
//     PANGO_SCRIPT_HANUNOO = 43,
//     PANGO_SCRIPT_BUHID = 44,
//     PANGO_SCRIPT_TAGBANWA = 45,
//     PANGO_SCRIPT_BRAILLE = 46,
//     PANGO_SCRIPT_CYPRIOT = 47,
//     PANGO_SCRIPT_LIMBU = 48,
//     PANGO_SCRIPT_OSMANYA = 49,
//     PANGO_SCRIPT_SHAVIAN = 50,
//     PANGO_SCRIPT_LINEAR_B = 51,
//     PANGO_SCRIPT_TAI_LE = 52,
//     PANGO_SCRIPT_UGARITIC = 53,
//     PANGO_SCRIPT_NEW_TAI_LUE = 54,
//     PANGO_SCRIPT_BUGINESE = 55,
//     PANGO_SCRIPT_GLAGOLITIC = 56,
//     PANGO_SCRIPT_TIFINAGH = 57,
//     PANGO_SCRIPT_SYLOTI_NAGRI = 58,
//     PANGO_SCRIPT_OLD_PERSIAN = 59,
//     PANGO_SCRIPT_KHAROSHTHI = 60,
//     PANGO_SCRIPT_UNKNOWN = 61,
//     PANGO_SCRIPT_BALINESE = 62,
//     PANGO_SCRIPT_CUNEIFORM = 63,
//     PANGO_SCRIPT_PHOENICIAN = 64,
//     PANGO_SCRIPT_PHAGS_PA = 65,
//     PANGO_SCRIPT_NKO = 66,
//     PANGO_SCRIPT_KAYAH_LI = 67,
//     PANGO_SCRIPT_LEPCHA = 68,
//     PANGO_SCRIPT_REJANG = 69,
//     PANGO_SCRIPT_SUNDANESE = 70,
//     PANGO_SCRIPT_SAURASHTRA = 71,
//     PANGO_SCRIPT_CHAM = 72,
//     PANGO_SCRIPT_OL_CHIKI = 73,
//     PANGO_SCRIPT_VAI = 74,
//     PANGO_SCRIPT_CARIAN = 75,
//     PANGO_SCRIPT_LYCIAN = 76,
//     PANGO_SCRIPT_LYDIAN = 77,
//     PANGO_SCRIPT_BATAK = 78,
//     PANGO_SCRIPT_BRAHMI = 79,
//     PANGO_SCRIPT_MANDAIC = 80,
//     PANGO_SCRIPT_CHAKMA = 81,
//     PANGO_SCRIPT_MEROITIC_CURSIVE = 82,
//     PANGO_SCRIPT_MEROITIC_HIEROGLYPHS = 83,
//     PANGO_SCRIPT_MIAO = 84,
//     PANGO_SCRIPT_SHARADA = 85,
//     PANGO_SCRIPT_SORA_SOMPENG = 86,
//     PANGO_SCRIPT_TAKRI = 87,
//     PANGO_SCRIPT_BASSA_VAH = 88,
//     PANGO_SCRIPT_CAUCASIAN_ALBANIAN = 89,
//     PANGO_SCRIPT_DUPLOYAN = 90,
//     PANGO_SCRIPT_ELBASAN = 91,
//     PANGO_SCRIPT_GRANTHA = 92,
//     PANGO_SCRIPT_KHOJKI = 93,
//     PANGO_SCRIPT_KHUDAWADI = 94,
//     PANGO_SCRIPT_LINEAR_A = 95,
//     PANGO_SCRIPT_MAHAJANI = 96,
//     PANGO_SCRIPT_MANICHAEAN = 97,
//     PANGO_SCRIPT_MENDE_KIKAKUI = 98,
//     PANGO_SCRIPT_MODI = 99,
//     PANGO_SCRIPT_MRO = 100,
//     PANGO_SCRIPT_NABATAEAN = 101,
//     PANGO_SCRIPT_OLD_NORTH_ARABIAN = 102,
//     PANGO_SCRIPT_OLD_PERMIC = 103,
//     PANGO_SCRIPT_PAHAWH_HMONG = 104,
//     PANGO_SCRIPT_PALMYRENE = 105,
//     PANGO_SCRIPT_PAU_CIN_HAU = 106,
//     PANGO_SCRIPT_PSALTER_PAHLAVI = 107,
//     PANGO_SCRIPT_SIDDHAM = 108,
//     PANGO_SCRIPT_TIRHUTA = 109,
//     PANGO_SCRIPT_WARANG_CITI = 110,
//     PANGO_SCRIPT_AHOM = 111,
//     PANGO_SCRIPT_ANATOLIAN_HIEROGLYPHS = 112,
//     PANGO_SCRIPT_HATRAN = 113,
//     PANGO_SCRIPT_MULTANI = 114,
//     PANGO_SCRIPT_OLD_HUNGARIAN = 115,
//     PANGO_SCRIPT_SIGNWRITING = 116,
// }
// pub enum _PangoLanguage { }
// pub type PangoLanguage = _PangoLanguage;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoBidiType {
//     PANGO_BIDI_TYPE_L = 0,
//     PANGO_BIDI_TYPE_LRE = 1,
//     PANGO_BIDI_TYPE_LRO = 2,
//     PANGO_BIDI_TYPE_R = 3,
//     PANGO_BIDI_TYPE_AL = 4,
//     PANGO_BIDI_TYPE_RLE = 5,
//     PANGO_BIDI_TYPE_RLO = 6,
//     PANGO_BIDI_TYPE_PDF = 7,
//     PANGO_BIDI_TYPE_EN = 8,
//     PANGO_BIDI_TYPE_ES = 9,
//     PANGO_BIDI_TYPE_ET = 10,
//     PANGO_BIDI_TYPE_AN = 11,
//     PANGO_BIDI_TYPE_CS = 12,
//     PANGO_BIDI_TYPE_NSM = 13,
//     PANGO_BIDI_TYPE_BN = 14,
//     PANGO_BIDI_TYPE_B = 15,
//     PANGO_BIDI_TYPE_S = 16,
//     PANGO_BIDI_TYPE_WS = 17,
//     PANGO_BIDI_TYPE_ON = 18,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoDirection {
//     PANGO_DIRECTION_LTR = 0,
//     PANGO_DIRECTION_RTL = 1,
//     PANGO_DIRECTION_TTB_LTR = 2,
//     PANGO_DIRECTION_TTB_RTL = 3,
//     PANGO_DIRECTION_WEAK_LTR = 4,
//     PANGO_DIRECTION_WEAK_RTL = 5,
//     PANGO_DIRECTION_NEUTRAL = 6,
// }
// pub enum _PangoFontDescription { }
// pub type PangoFontDescription = _PangoFontDescription;
// pub enum _PangoFontMetrics { }
// pub type PangoFontMetrics = _PangoFontMetrics;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoStyle {
//     PANGO_STYLE_NORMAL = 0,
//     PANGO_STYLE_OBLIQUE = 1,
//     PANGO_STYLE_ITALIC = 2,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoVariant {
//     PANGO_VARIANT_NORMAL = 0,
//     PANGO_VARIANT_SMALL_CAPS = 1,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoWeight {
//     PANGO_WEIGHT_THIN = 100,
//     PANGO_WEIGHT_ULTRALIGHT = 200,
//     PANGO_WEIGHT_LIGHT = 300,
//     PANGO_WEIGHT_SEMILIGHT = 350,
//     PANGO_WEIGHT_BOOK = 380,
//     PANGO_WEIGHT_NORMAL = 400,
//     PANGO_WEIGHT_MEDIUM = 500,
//     PANGO_WEIGHT_SEMIBOLD = 600,
//     PANGO_WEIGHT_BOLD = 700,
//     PANGO_WEIGHT_ULTRABOLD = 800,
//     PANGO_WEIGHT_HEAVY = 900,
//     PANGO_WEIGHT_ULTRAHEAVY = 1000,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoStretch {
//     PANGO_STRETCH_ULTRA_CONDENSED = 0,
//     PANGO_STRETCH_EXTRA_CONDENSED = 1,
//     PANGO_STRETCH_CONDENSED = 2,
//     PANGO_STRETCH_SEMI_CONDENSED = 3,
//     PANGO_STRETCH_NORMAL = 4,
//     PANGO_STRETCH_SEMI_EXPANDED = 5,
//     PANGO_STRETCH_EXPANDED = 6,
//     PANGO_STRETCH_EXTRA_EXPANDED = 7,
//     PANGO_STRETCH_ULTRA_EXPANDED = 8,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoFontMask {
//     PANGO_FONT_MASK_FAMILY = 1,
//     PANGO_FONT_MASK_STYLE = 2,
//     PANGO_FONT_MASK_VARIANT = 4,
//     PANGO_FONT_MASK_WEIGHT = 8,
//     PANGO_FONT_MASK_STRETCH = 16,
//     PANGO_FONT_MASK_SIZE = 32,
//     PANGO_FONT_MASK_GRAVITY = 64,
// }
// pub enum _PangoFontFamily { }
// pub type PangoFontFamily = _PangoFontFamily;
// pub enum _PangoFontFace { }
// pub type PangoFontFace = _PangoFontFace;
// pub type PangoColor = _PangoColor;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoColor {
//     pub red: guint16,
//     pub green: guint16,
//     pub blue: guint16,
// }
// impl ::std::default::Default for _PangoColor {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type PangoAttribute = _PangoAttribute;
// pub type PangoAttrClass = _PangoAttrClass;
// pub type PangoAttrString = _PangoAttrString;
// pub type PangoAttrLanguage = _PangoAttrLanguage;
// pub type PangoAttrInt = _PangoAttrInt;
// pub type PangoAttrSize = _PangoAttrSize;
// pub type PangoAttrFloat = _PangoAttrFloat;
// pub type PangoAttrColor = _PangoAttrColor;
// pub type PangoAttrFontDesc = _PangoAttrFontDesc;
// pub type PangoAttrShape = _PangoAttrShape;
// pub type PangoAttrFontFeatures = _PangoAttrFontFeatures;
// pub enum _PangoAttrList { }
// pub type PangoAttrList = _PangoAttrList;
// pub enum _PangoAttrIterator { }
// pub type PangoAttrIterator = _PangoAttrIterator;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoAttrType {
//     PANGO_ATTR_INVALID = 0,
//     PANGO_ATTR_LANGUAGE = 1,
//     PANGO_ATTR_FAMILY = 2,
//     PANGO_ATTR_STYLE = 3,
//     PANGO_ATTR_WEIGHT = 4,
//     PANGO_ATTR_VARIANT = 5,
//     PANGO_ATTR_STRETCH = 6,
//     PANGO_ATTR_SIZE = 7,
//     PANGO_ATTR_FONT_DESC = 8,
//     PANGO_ATTR_FOREGROUND = 9,
//     PANGO_ATTR_BACKGROUND = 10,
//     PANGO_ATTR_UNDERLINE = 11,
//     PANGO_ATTR_STRIKETHROUGH = 12,
//     PANGO_ATTR_RISE = 13,
//     PANGO_ATTR_SHAPE = 14,
//     PANGO_ATTR_SCALE = 15,
//     PANGO_ATTR_FALLBACK = 16,
//     PANGO_ATTR_LETTER_SPACING = 17,
//     PANGO_ATTR_UNDERLINE_COLOR = 18,
//     PANGO_ATTR_STRIKETHROUGH_COLOR = 19,
//     PANGO_ATTR_ABSOLUTE_SIZE = 20,
//     PANGO_ATTR_GRAVITY = 21,
//     PANGO_ATTR_GRAVITY_HINT = 22,
//     PANGO_ATTR_FONT_FEATURES = 23,
//     PANGO_ATTR_FOREGROUND_ALPHA = 24,
//     PANGO_ATTR_BACKGROUND_ALPHA = 25,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoUnderline {
//     PANGO_UNDERLINE_NONE = 0,
//     PANGO_UNDERLINE_SINGLE = 1,
//     PANGO_UNDERLINE_DOUBLE = 2,
//     PANGO_UNDERLINE_LOW = 3,
//     PANGO_UNDERLINE_ERROR = 4,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoAttribute {
//     pub klass: *const PangoAttrClass,
//     pub start_index: guint,
//     pub end_index: guint,
// }
// impl ::std::default::Default for _PangoAttribute {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type PangoAttrFilterFunc =
//     ::std::option::Option<unsafe extern "C" fn(attribute: *mut PangoAttribute,
//                                                user_data: gpointer)
//                               -> gboolean>;
// pub type PangoAttrDataCopyFunc =
//     ::std::option::Option<extern "C" fn(user_data: gconstpointer)
//                               -> gpointer>;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoAttrClass {
//     pub type_: PangoAttrType,
//     pub copy: ::std::option::Option<unsafe extern "C" fn(attr:
//                                                              *const PangoAttribute)
//                                         -> *mut PangoAttribute>,
//     pub destroy: ::std::option::Option<unsafe extern "C" fn(attr:
//                                                                 *mut PangoAttribute)>,
//     pub equal: ::std::option::Option<unsafe extern "C" fn(attr1:
//                                                               *const PangoAttribute,
//                                                           attr2:
//                                                               *const PangoAttribute)
//                                          -> gboolean>,
// }
// impl ::std::default::Default for _PangoAttrClass {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoAttrString {
//     pub attr: PangoAttribute,
//     pub value: *mut ::std::os::raw::c_char,
// }
// impl ::std::default::Default for _PangoAttrString {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoAttrLanguage {
//     pub attr: PangoAttribute,
//     pub value: *mut PangoLanguage,
// }
// impl ::std::default::Default for _PangoAttrLanguage {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoAttrInt {
//     pub attr: PangoAttribute,
//     pub value: ::std::os::raw::c_int,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _PangoAttrInt {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoAttrFloat {
//     pub attr: PangoAttribute,
//     pub value: ::std::os::raw::c_double,
// }
// impl ::std::default::Default for _PangoAttrFloat {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoAttrColor {
//     pub attr: PangoAttribute,
//     pub color: PangoColor,
//     _bindgen_padding_0_: [u8; 2usize],
// }
// impl ::std::default::Default for _PangoAttrColor {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoAttrSize {
//     pub attr: PangoAttribute,
//     pub size: ::std::os::raw::c_int,
//     pub _bindgen_bitfield_1_: guint,
// }
// impl ::std::default::Default for _PangoAttrSize {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoAttrShape {
//     pub attr: PangoAttribute,
//     pub ink_rect: PangoRectangle,
//     pub logical_rect: PangoRectangle,
//     pub data: gpointer,
//     pub copy_func: PangoAttrDataCopyFunc,
//     pub destroy_func: GDestroyNotify,
// }
// impl ::std::default::Default for _PangoAttrShape {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoAttrFontDesc {
//     pub attr: PangoAttribute,
//     pub desc: *mut PangoFontDescription,
// }
// impl ::std::default::Default for _PangoAttrFontDesc {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoAttrFontFeatures {
//     pub attr: PangoAttribute,
//     pub features: *mut gchar,
// }
// impl ::std::default::Default for _PangoAttrFontFeatures {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type PangoAnalysis = _PangoAnalysis;
// pub type PangoItem = _PangoItem;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoAnalysis {
//     pub shape_engine: *mut PangoEngineShape,
//     pub lang_engine: *mut PangoEngineLang,
//     pub font: *mut PangoFont,
//     pub level: guint8,
//     pub gravity: guint8,
//     pub flags: guint8,
//     pub script: guint8,
//     pub language: *mut PangoLanguage,
//     pub extra_attrs: *mut GSList,
// }
// impl ::std::default::Default for _PangoAnalysis {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoItem {
//     pub offset: gint,
//     pub length: gint,
//     pub num_chars: gint,
//     pub analysis: PangoAnalysis,
// }
// impl ::std::default::Default for _PangoItem {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoLogAttr {
//     pub _bindgen_bitfield_1_: guint,
//     pub _bindgen_bitfield_2_: guint,
//     pub _bindgen_bitfield_3_: guint,
//     pub _bindgen_bitfield_4_: guint,
//     pub _bindgen_bitfield_5_: guint,
//     pub _bindgen_bitfield_6_: guint,
//     pub _bindgen_bitfield_7_: guint,
//     pub _bindgen_bitfield_8_: guint,
//     pub _bindgen_bitfield_9_: guint,
//     pub _bindgen_bitfield_10_: guint,
//     pub _bindgen_bitfield_11_: guint,
//     pub _bindgen_bitfield_12_: guint,
//     pub _bindgen_bitfield_13_: guint,
// }
// impl ::std::default::Default for _PangoLogAttr {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _PangoFontset { }
// pub type PangoFontset = _PangoFontset;
// pub type PangoFontsetForeachFunc =
//     ::std::option::Option<unsafe extern "C" fn(fontset: *mut PangoFontset,
//                                                font: *mut PangoFont,
//                                                user_data: gpointer)
//                               -> gboolean>;
// pub enum _PangoContext { }
// pub type PangoContext = _PangoContext;
// pub enum _PangoContextClass { }
// pub type PangoContextClass = _PangoContextClass;
// pub type PangoGlyphGeometry = _PangoGlyphGeometry;
// pub type PangoGlyphVisAttr = _PangoGlyphVisAttr;
// pub type PangoGlyphInfo = _PangoGlyphInfo;
// pub type PangoGlyphString = _PangoGlyphString;
// pub type PangoGlyphUnit = gint32;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoGlyphGeometry {
//     pub width: PangoGlyphUnit,
//     pub x_offset: PangoGlyphUnit,
//     pub y_offset: PangoGlyphUnit,
// }
// impl ::std::default::Default for _PangoGlyphGeometry {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoGlyphVisAttr {
//     pub _bindgen_bitfield_1_: guint,
// }
// impl ::std::default::Default for _PangoGlyphVisAttr {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoGlyphInfo {
//     pub glyph: PangoGlyph,
//     pub geometry: PangoGlyphGeometry,
//     pub attr: PangoGlyphVisAttr,
// }
// impl ::std::default::Default for _PangoGlyphInfo {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoGlyphString {
//     pub num_glyphs: gint,
//     pub glyphs: *mut PangoGlyphInfo,
//     pub log_clusters: *mut gint,
//     pub space: gint,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _PangoGlyphString {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type PangoGlyphItem = _PangoGlyphItem;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoGlyphItem {
//     pub item: *mut PangoItem,
//     pub glyphs: *mut PangoGlyphString,
// }
// impl ::std::default::Default for _PangoGlyphItem {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type PangoGlyphItemIter = _PangoGlyphItemIter;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoGlyphItemIter {
//     pub glyph_item: *mut PangoGlyphItem,
//     pub text: *const gchar,
//     pub start_glyph: ::std::os::raw::c_int,
//     pub start_index: ::std::os::raw::c_int,
//     pub start_char: ::std::os::raw::c_int,
//     pub end_glyph: ::std::os::raw::c_int,
//     pub end_index: ::std::os::raw::c_int,
//     pub end_char: ::std::os::raw::c_int,
// }
// impl ::std::default::Default for _PangoGlyphItemIter {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _PangoTabArray { }
// pub type PangoTabArray = _PangoTabArray;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoTabAlign { PANGO_TAB_LEFT = 0, }
// pub enum _PangoLayout { }
// pub type PangoLayout = _PangoLayout;
// pub enum _PangoLayoutClass { }
// pub type PangoLayoutClass = _PangoLayoutClass;
// pub type PangoLayoutLine = _PangoLayoutLine;
// pub type PangoLayoutRun = PangoGlyphItem;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoAlignment {
//     PANGO_ALIGN_LEFT = 0,
//     PANGO_ALIGN_CENTER = 1,
//     PANGO_ALIGN_RIGHT = 2,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoWrapMode {
//     PANGO_WRAP_WORD = 0,
//     PANGO_WRAP_CHAR = 1,
//     PANGO_WRAP_WORD_CHAR = 2,
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoEllipsizeMode {
//     PANGO_ELLIPSIZE_NONE = 0,
//     PANGO_ELLIPSIZE_START = 1,
//     PANGO_ELLIPSIZE_MIDDLE = 2,
//     PANGO_ELLIPSIZE_END = 3,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoLayoutLine {
//     pub layout: *mut PangoLayout,
//     pub start_index: gint,
//     pub length: gint,
//     pub runs: *mut GSList,
//     pub _bindgen_bitfield_1_: guint,
//     pub _bindgen_bitfield_2_: guint,
// }
// impl ::std::default::Default for _PangoLayoutLine {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _PangoLayoutIter { }
// pub type PangoLayoutIter = _PangoLayoutIter;
// pub type PangoRenderer = _PangoRenderer;
// pub type PangoRendererClass = _PangoRendererClass;
// pub enum _PangoRendererPrivate { }
// pub type PangoRendererPrivate = _PangoRendererPrivate;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum PangoRenderPart {
//     PANGO_RENDER_PART_FOREGROUND = 0,
//     PANGO_RENDER_PART_BACKGROUND = 1,
//     PANGO_RENDER_PART_UNDERLINE = 2,
//     PANGO_RENDER_PART_STRIKETHROUGH = 3,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoRenderer {
//     pub parent_instance: GObject,
//     pub underline: PangoUnderline,
//     pub strikethrough: gboolean,
//     pub active_count: ::std::os::raw::c_int,
//     pub matrix: *mut PangoMatrix,
//     pub priv_: *mut PangoRendererPrivate,
// }
// impl ::std::default::Default for _PangoRenderer {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _PangoRendererClass {
//     pub parent_class: GObjectClass,
//     pub draw_glyphs: ::std::option::Option<unsafe extern "C" fn(renderer:
//                                                                     *mut PangoRenderer,
//                                                                 font:
//                                                                     *mut PangoFont,
//                                                                 glyphs:
//                                                                     *mut PangoGlyphString,
//                                                                 x:
//                                                                     ::std::os::raw::c_int,
//                                                                 y:
//                                                                     ::std::os::raw::c_int)>,
//     pub draw_rectangle: ::std::option::Option<unsafe extern "C" fn(renderer:
//                                                                        *mut PangoRenderer,
//                                                                    part:
//                                                                        PangoRenderPart,
//                                                                    x:
//                                                                        ::std::os::raw::c_int,
//                                                                    y:
//                                                                        ::std::os::raw::c_int,
//                                                                    width:
//                                                                        ::std::os::raw::c_int,
//                                                                    height:
//                                                                        ::std::os::raw::c_int)>,
//     pub draw_error_underline: ::std::option::Option<unsafe extern "C" fn(renderer:
//                                                                              *mut PangoRenderer,
//                                                                          x:
//                                                                              ::std::os::raw::c_int,
//                                                                          y:
//                                                                              ::std::os::raw::c_int,
//                                                                          width:
//                                                                              ::std::os::raw::c_int,
//                                                                          height:
//                                                                              ::std::os::raw::c_int)>,
//     pub draw_shape: ::std::option::Option<unsafe extern "C" fn(renderer:
//                                                                    *mut PangoRenderer,
//                                                                attr:
//                                                                    *mut PangoAttrShape,
//                                                                x:
//                                                                    ::std::os::raw::c_int,
//                                                                y:
//                                                                    ::std::os::raw::c_int)>,
//     pub draw_trapezoid: ::std::option::Option<unsafe extern "C" fn(renderer:
//                                                                        *mut PangoRenderer,
//                                                                    part:
//                                                                        PangoRenderPart,
//                                                                    y1_:
//                                                                        ::std::os::raw::c_double,
//                                                                    x11:
//                                                                        ::std::os::raw::c_double,
//                                                                    x21:
//                                                                        ::std::os::raw::c_double,
//                                                                    y2:
//                                                                        ::std::os::raw::c_double,
//                                                                    x12:
//                                                                        ::std::os::raw::c_double,
//                                                                    x22:
//                                                                        ::std::os::raw::c_double)>,
//     pub draw_glyph: ::std::option::Option<unsafe extern "C" fn(renderer:
//                                                                    *mut PangoRenderer,
//                                                                font:
//                                                                    *mut PangoFont,
//                                                                glyph:
//                                                                    PangoGlyph,
//                                                                x:
//                                                                    ::std::os::raw::c_double,
//                                                                y:
//                                                                    ::std::os::raw::c_double)>,
//     pub part_changed: ::std::option::Option<unsafe extern "C" fn(renderer:
//                                                                      *mut PangoRenderer,
//                                                                  part:
//                                                                      PangoRenderPart)>,
//     pub begin: ::std::option::Option<unsafe extern "C" fn(renderer:
//                                                               *mut PangoRenderer)>,
//     pub end: ::std::option::Option<unsafe extern "C" fn(renderer:
//                                                             *mut PangoRenderer)>,
//     pub prepare_run: ::std::option::Option<unsafe extern "C" fn(renderer:
//                                                                     *mut PangoRenderer,
//                                                                 run:
//                                                                     *mut PangoLayoutRun)>,
//     pub draw_glyph_item: ::std::option::Option<unsafe extern "C" fn(renderer:
//                                                                         *mut PangoRenderer,
//                                                                     text:
//                                                                         *const ::std::os::raw::c_char,
//                                                                     glyph_item:
//                                                                         *mut PangoGlyphItem,
//                                                                     x:
//                                                                         ::std::os::raw::c_int,
//                                                                     y:
//                                                                         ::std::os::raw::c_int)>,
//     pub _pango_reserved2: ::std::option::Option<extern "C" fn()>,
//     pub _pango_reserved3: ::std::option::Option<extern "C" fn()>,
//     pub _pango_reserved4: ::std::option::Option<extern "C" fn()>,
// }
// impl ::std::default::Default for _PangoRendererClass {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type FILE = _IO_FILE;
// pub type __FILE = _IO_FILE;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct __mbstate_t {
//     pub __count: ::std::os::raw::c_int,
//     pub __value: Union_Unnamed41,
// }
// impl ::std::default::Default for __mbstate_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Union_Unnamed41 {
//     pub _bindgen_data_: [u32; 1usize],
// }
// impl Union_Unnamed41 {
//     pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for Union_Unnamed41 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _G_fpos_t {
//     pub __pos: __off_t,
//     pub __state: __mbstate_t,
// }
// impl ::std::default::Default for _G_fpos_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _G_fpos64_t {
//     pub __pos: __off64_t,
//     pub __state: __mbstate_t,
// }
// impl ::std::default::Default for _G_fpos64_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _IO_jump_t { }
// pub type _IO_lock_t = ::std::os::raw::c_void;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _IO_marker {
//     pub _next: *mut _IO_marker,
//     pub _sbuf: *mut _IO_FILE,
//     pub _pos: ::std::os::raw::c_int,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _IO_marker {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum __codecvt_result {
//     __codecvt_ok = 0,
//     __codecvt_partial = 1,
//     __codecvt_error = 2,
//     __codecvt_noconv = 3,
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _IO_FILE {
//     pub _flags: ::std::os::raw::c_int,
//     pub _IO_read_ptr: *mut ::std::os::raw::c_char,
//     pub _IO_read_end: *mut ::std::os::raw::c_char,
//     pub _IO_read_base: *mut ::std::os::raw::c_char,
//     pub _IO_write_base: *mut ::std::os::raw::c_char,
//     pub _IO_write_ptr: *mut ::std::os::raw::c_char,
//     pub _IO_write_end: *mut ::std::os::raw::c_char,
//     pub _IO_buf_base: *mut ::std::os::raw::c_char,
//     pub _IO_buf_end: *mut ::std::os::raw::c_char,
//     pub _IO_save_base: *mut ::std::os::raw::c_char,
//     pub _IO_backup_base: *mut ::std::os::raw::c_char,
//     pub _IO_save_end: *mut ::std::os::raw::c_char,
//     pub _markers: *mut _IO_marker,
//     pub _chain: *mut _IO_FILE,
//     pub _fileno: ::std::os::raw::c_int,
//     pub _flags2: ::std::os::raw::c_int,
//     pub _old_offset: __off_t,
//     pub _cur_column: ::std::os::raw::c_ushort,
//     pub _vtable_offset: ::std::os::raw::c_char,
//     pub _shortbuf: [::std::os::raw::c_char; 1usize],
//     pub _lock: *mut _IO_lock_t,
//     pub _offset: __off64_t,
//     pub __pad1: *mut ::std::os::raw::c_void,
//     pub __pad2: *mut ::std::os::raw::c_void,
//     pub __pad3: *mut ::std::os::raw::c_void,
//     pub __pad4: *mut ::std::os::raw::c_void,
//     pub __pad5: size_t,
//     pub _mode: ::std::os::raw::c_int,
//     pub _unused2: [::std::os::raw::c_char; 20usize],
// }
// impl ::std::default::Default for _IO_FILE {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub enum _IO_FILE_plus { }
// pub type __io_read_fn =
//     unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
//                          __buf: *mut ::std::os::raw::c_char, __nbytes: size_t)
//         -> __ssize_t;
// pub type __io_write_fn =
//     unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
//                          __buf: *const ::std::os::raw::c_char, __n: size_t)
//         -> __ssize_t;
// pub type __io_seek_fn =
//     unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
//                          __pos: *mut __off64_t, __w: ::std::os::raw::c_int)
//         -> ::std::os::raw::c_int;
// pub type __io_close_fn =
//     unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void)
//         -> ::std::os::raw::c_int;
// pub type fpos_t = _G_fpos_t;
// pub type cairo_bool_t = ::std::os::raw::c_int;
// pub enum _cairo { }
// pub type cairo_t = _cairo;
// pub enum _cairo_surface { }
// pub type cairo_surface_t = _cairo_surface;
// pub enum _cairo_device { }
// pub type cairo_device_t = _cairo_device;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _cairo_matrix {
//     pub xx: ::std::os::raw::c_double,
//     pub yx: ::std::os::raw::c_double,
//     pub xy: ::std::os::raw::c_double,
//     pub yy: ::std::os::raw::c_double,
//     pub x0: ::std::os::raw::c_double,
//     pub y0: ::std::os::raw::c_double,
// }
// impl ::std::default::Default for _cairo_matrix {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type cairo_matrix_t = _cairo_matrix;
// pub enum _cairo_pattern { }
// pub type cairo_pattern_t = _cairo_pattern;
// pub type cairo_destroy_func_t =
//     ::std::option::Option<unsafe extern "C" fn(data:
//                                                    *mut ::std::os::raw::c_void)>;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _cairo_user_data_key {
//     pub unused: ::std::os::raw::c_int,
// }
// impl ::std::default::Default for _cairo_user_data_key {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type cairo_user_data_key_t = _cairo_user_data_key;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_status {
//     CAIRO_STATUS_SUCCESS = 0,
//     CAIRO_STATUS_NO_MEMORY = 1,
//     CAIRO_STATUS_INVALID_RESTORE = 2,
//     CAIRO_STATUS_INVALID_POP_GROUP = 3,
//     CAIRO_STATUS_NO_CURRENT_POINT = 4,
//     CAIRO_STATUS_INVALID_MATRIX = 5,
//     CAIRO_STATUS_INVALID_STATUS = 6,
//     CAIRO_STATUS_NULL_POINTER = 7,
//     CAIRO_STATUS_INVALID_STRING = 8,
//     CAIRO_STATUS_INVALID_PATH_DATA = 9,
//     CAIRO_STATUS_READ_ERROR = 10,
//     CAIRO_STATUS_WRITE_ERROR = 11,
//     CAIRO_STATUS_SURFACE_FINISHED = 12,
//     CAIRO_STATUS_SURFACE_TYPE_MISMATCH = 13,
//     CAIRO_STATUS_PATTERN_TYPE_MISMATCH = 14,
//     CAIRO_STATUS_INVALID_CONTENT = 15,
//     CAIRO_STATUS_INVALID_FORMAT = 16,
//     CAIRO_STATUS_INVALID_VISUAL = 17,
//     CAIRO_STATUS_FILE_NOT_FOUND = 18,
//     CAIRO_STATUS_INVALID_DASH = 19,
//     CAIRO_STATUS_INVALID_DSC_COMMENT = 20,
//     CAIRO_STATUS_INVALID_INDEX = 21,
//     CAIRO_STATUS_CLIP_NOT_REPRESENTABLE = 22,
//     CAIRO_STATUS_TEMP_FILE_ERROR = 23,
//     CAIRO_STATUS_INVALID_STRIDE = 24,
//     CAIRO_STATUS_FONT_TYPE_MISMATCH = 25,
//     CAIRO_STATUS_USER_FONT_IMMUTABLE = 26,
//     CAIRO_STATUS_USER_FONT_ERROR = 27,
//     CAIRO_STATUS_NEGATIVE_COUNT = 28,
//     CAIRO_STATUS_INVALID_CLUSTERS = 29,
//     CAIRO_STATUS_INVALID_SLANT = 30,
//     CAIRO_STATUS_INVALID_WEIGHT = 31,
//     CAIRO_STATUS_INVALID_SIZE = 32,
//     CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED = 33,
//     CAIRO_STATUS_DEVICE_TYPE_MISMATCH = 34,
//     CAIRO_STATUS_DEVICE_ERROR = 35,
//     CAIRO_STATUS_INVALID_MESH_CONSTRUCTION = 36,
//     CAIRO_STATUS_DEVICE_FINISHED = 37,
//     CAIRO_STATUS_JBIG2_GLOBAL_MISSING = 38,
//     CAIRO_STATUS_LAST_STATUS = 39,
// }
// pub type cairo_status_t = _cairo_status;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_content {
//     CAIRO_CONTENT_COLOR = 4096,
//     CAIRO_CONTENT_ALPHA = 8192,
//     CAIRO_CONTENT_COLOR_ALPHA = 12288,
// }
// pub type cairo_content_t = _cairo_content;
// #[derive(Copy, Clone)]
// #[repr(i32)]
// #[derive(Debug)]
// pub enum _cairo_format {
//     CAIRO_FORMAT_INVALID = -1,
//     CAIRO_FORMAT_ARGB32 = 0,
//     CAIRO_FORMAT_RGB24 = 1,
//     CAIRO_FORMAT_A8 = 2,
//     CAIRO_FORMAT_A1 = 3,
//     CAIRO_FORMAT_RGB16_565 = 4,
//     CAIRO_FORMAT_RGB30 = 5,
// }
// pub type cairo_format_t = _cairo_format;
// pub type cairo_write_func_t =
//     ::std::option::Option<unsafe extern "C" fn(closure:
//                                                    *mut ::std::os::raw::c_void,
//                                                data:
//                                                    *const ::std::os::raw::c_uchar,
//                                                length: ::std::os::raw::c_uint)
//                               -> cairo_status_t>;
// pub type cairo_read_func_t =
//     ::std::option::Option<unsafe extern "C" fn(closure:
//                                                    *mut ::std::os::raw::c_void,
//                                                data:
//                                                    *mut ::std::os::raw::c_uchar,
//                                                length: ::std::os::raw::c_uint)
//                               -> cairo_status_t>;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _cairo_rectangle_int {
//     pub x: ::std::os::raw::c_int,
//     pub y: ::std::os::raw::c_int,
//     pub width: ::std::os::raw::c_int,
//     pub height: ::std::os::raw::c_int,
// }
// impl ::std::default::Default for _cairo_rectangle_int {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type cairo_rectangle_int_t = _cairo_rectangle_int;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_operator {
//     CAIRO_OPERATOR_CLEAR = 0,
//     CAIRO_OPERATOR_SOURCE = 1,
//     CAIRO_OPERATOR_OVER = 2,
//     CAIRO_OPERATOR_IN = 3,
//     CAIRO_OPERATOR_OUT = 4,
//     CAIRO_OPERATOR_ATOP = 5,
//     CAIRO_OPERATOR_DEST = 6,
//     CAIRO_OPERATOR_DEST_OVER = 7,
//     CAIRO_OPERATOR_DEST_IN = 8,
//     CAIRO_OPERATOR_DEST_OUT = 9,
//     CAIRO_OPERATOR_DEST_ATOP = 10,
//     CAIRO_OPERATOR_XOR = 11,
//     CAIRO_OPERATOR_ADD = 12,
//     CAIRO_OPERATOR_SATURATE = 13,
//     CAIRO_OPERATOR_MULTIPLY = 14,
//     CAIRO_OPERATOR_SCREEN = 15,
//     CAIRO_OPERATOR_OVERLAY = 16,
//     CAIRO_OPERATOR_DARKEN = 17,
//     CAIRO_OPERATOR_LIGHTEN = 18,
//     CAIRO_OPERATOR_COLOR_DODGE = 19,
//     CAIRO_OPERATOR_COLOR_BURN = 20,
//     CAIRO_OPERATOR_HARD_LIGHT = 21,
//     CAIRO_OPERATOR_SOFT_LIGHT = 22,
//     CAIRO_OPERATOR_DIFFERENCE = 23,
//     CAIRO_OPERATOR_EXCLUSION = 24,
//     CAIRO_OPERATOR_HSL_HUE = 25,
//     CAIRO_OPERATOR_HSL_SATURATION = 26,
//     CAIRO_OPERATOR_HSL_COLOR = 27,
//     CAIRO_OPERATOR_HSL_LUMINOSITY = 28,
// }
// pub type cairo_operator_t = _cairo_operator;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_antialias {
//     CAIRO_ANTIALIAS_DEFAULT = 0,
//     CAIRO_ANTIALIAS_NONE = 1,
//     CAIRO_ANTIALIAS_GRAY = 2,
//     CAIRO_ANTIALIAS_SUBPIXEL = 3,
//     CAIRO_ANTIALIAS_FAST = 4,
//     CAIRO_ANTIALIAS_GOOD = 5,
//     CAIRO_ANTIALIAS_BEST = 6,
// }
// pub type cairo_antialias_t = _cairo_antialias;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_fill_rule {
//     CAIRO_FILL_RULE_WINDING = 0,
//     CAIRO_FILL_RULE_EVEN_ODD = 1,
// }
// pub type cairo_fill_rule_t = _cairo_fill_rule;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_line_cap {
//     CAIRO_LINE_CAP_BUTT = 0,
//     CAIRO_LINE_CAP_ROUND = 1,
//     CAIRO_LINE_CAP_SQUARE = 2,
// }
// pub type cairo_line_cap_t = _cairo_line_cap;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_line_join {
//     CAIRO_LINE_JOIN_MITER = 0,
//     CAIRO_LINE_JOIN_ROUND = 1,
//     CAIRO_LINE_JOIN_BEVEL = 2,
// }
// pub type cairo_line_join_t = _cairo_line_join;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _cairo_rectangle {
//     pub x: ::std::os::raw::c_double,
//     pub y: ::std::os::raw::c_double,
//     pub width: ::std::os::raw::c_double,
//     pub height: ::std::os::raw::c_double,
// }
// impl ::std::default::Default for _cairo_rectangle {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type cairo_rectangle_t = _cairo_rectangle;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _cairo_rectangle_list {
//     pub status: cairo_status_t,
//     pub rectangles: *mut cairo_rectangle_t,
//     pub num_rectangles: ::std::os::raw::c_int,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for _cairo_rectangle_list {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type cairo_rectangle_list_t = _cairo_rectangle_list;
// pub enum _cairo_scaled_font { }
// pub type cairo_scaled_font_t = _cairo_scaled_font;
// pub enum _cairo_font_face { }
// pub type cairo_font_face_t = _cairo_font_face;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct cairo_glyph_t {
//     pub index: ::std::os::raw::c_ulong,
//     pub x: ::std::os::raw::c_double,
//     pub y: ::std::os::raw::c_double,
// }
// impl ::std::default::Default for cairo_glyph_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct cairo_text_cluster_t {
//     pub num_bytes: ::std::os::raw::c_int,
//     pub num_glyphs: ::std::os::raw::c_int,
// }
// impl ::std::default::Default for cairo_text_cluster_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_text_cluster_flags { CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = 1, }
// pub type cairo_text_cluster_flags_t = _cairo_text_cluster_flags;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct cairo_text_extents_t {
//     pub x_bearing: ::std::os::raw::c_double,
//     pub y_bearing: ::std::os::raw::c_double,
//     pub width: ::std::os::raw::c_double,
//     pub height: ::std::os::raw::c_double,
//     pub x_advance: ::std::os::raw::c_double,
//     pub y_advance: ::std::os::raw::c_double,
// }
// impl ::std::default::Default for cairo_text_extents_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct cairo_font_extents_t {
//     pub ascent: ::std::os::raw::c_double,
//     pub descent: ::std::os::raw::c_double,
//     pub height: ::std::os::raw::c_double,
//     pub max_x_advance: ::std::os::raw::c_double,
//     pub max_y_advance: ::std::os::raw::c_double,
// }
// impl ::std::default::Default for cairo_font_extents_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_font_slant {
//     CAIRO_FONT_SLANT_NORMAL = 0,
//     CAIRO_FONT_SLANT_ITALIC = 1,
//     CAIRO_FONT_SLANT_OBLIQUE = 2,
// }
// pub type cairo_font_slant_t = _cairo_font_slant;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_font_weight {
//     CAIRO_FONT_WEIGHT_NORMAL = 0,
//     CAIRO_FONT_WEIGHT_BOLD = 1,
// }
// pub type cairo_font_weight_t = _cairo_font_weight;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_subpixel_order {
//     CAIRO_SUBPIXEL_ORDER_DEFAULT = 0,
//     CAIRO_SUBPIXEL_ORDER_RGB = 1,
//     CAIRO_SUBPIXEL_ORDER_BGR = 2,
//     CAIRO_SUBPIXEL_ORDER_VRGB = 3,
//     CAIRO_SUBPIXEL_ORDER_VBGR = 4,
// }
// pub type cairo_subpixel_order_t = _cairo_subpixel_order;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_hint_style {
//     CAIRO_HINT_STYLE_DEFAULT = 0,
//     CAIRO_HINT_STYLE_NONE = 1,
//     CAIRO_HINT_STYLE_SLIGHT = 2,
//     CAIRO_HINT_STYLE_MEDIUM = 3,
//     CAIRO_HINT_STYLE_FULL = 4,
// }
// pub type cairo_hint_style_t = _cairo_hint_style;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_hint_metrics {
//     CAIRO_HINT_METRICS_DEFAULT = 0,
//     CAIRO_HINT_METRICS_OFF = 1,
//     CAIRO_HINT_METRICS_ON = 2,
// }
// pub type cairo_hint_metrics_t = _cairo_hint_metrics;
// pub enum _cairo_font_options { }
// pub type cairo_font_options_t = _cairo_font_options;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_font_type {
//     CAIRO_FONT_TYPE_TOY = 0,
//     CAIRO_FONT_TYPE_FT = 1,
//     CAIRO_FONT_TYPE_WIN32 = 2,
//     CAIRO_FONT_TYPE_QUARTZ = 3,
//     CAIRO_FONT_TYPE_USER = 4,
// }
// pub type cairo_font_type_t = _cairo_font_type;
// pub type cairo_user_scaled_font_init_func_t =
//     ::std::option::Option<unsafe extern "C" fn(scaled_font:
//                                                    *mut cairo_scaled_font_t,
//                                                cr: *mut cairo_t,
//                                                extents:
//                                                    *mut cairo_font_extents_t)
//                               -> cairo_status_t>;
// pub type cairo_user_scaled_font_render_glyph_func_t =
//     ::std::option::Option<unsafe extern "C" fn(scaled_font:
//                                                    *mut cairo_scaled_font_t,
//                                                glyph: ::std::os::raw::c_ulong,
//                                                cr: *mut cairo_t,
//                                                extents:
//                                                    *mut cairo_text_extents_t)
//                               -> cairo_status_t>;
// pub type cairo_user_scaled_font_text_to_glyphs_func_t =
//     ::std::option::Option<unsafe extern "C" fn(scaled_font:
//                                                    *mut cairo_scaled_font_t,
//                                                utf8:
//                                                    *const ::std::os::raw::c_char,
//                                                utf8_len:
//                                                    ::std::os::raw::c_int,
//                                                glyphs:
//                                                    *mut *mut cairo_glyph_t,
//                                                num_glyphs:
//                                                    *mut ::std::os::raw::c_int,
//                                                clusters:
//                                                    *mut *mut cairo_text_cluster_t,
//                                                num_clusters:
//                                                    *mut ::std::os::raw::c_int,
//                                                cluster_flags:
//                                                    *mut cairo_text_cluster_flags_t)
//                               -> cairo_status_t>;
// pub type cairo_user_scaled_font_unicode_to_glyph_func_t =
//     ::std::option::Option<unsafe extern "C" fn(scaled_font:
//                                                    *mut cairo_scaled_font_t,
//                                                unicode:
//                                                    ::std::os::raw::c_ulong,
//                                                glyph_index:
//                                                    *mut ::std::os::raw::c_ulong)
//                               -> cairo_status_t>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_path_data_type {
//     CAIRO_PATH_MOVE_TO = 0,
//     CAIRO_PATH_LINE_TO = 1,
//     CAIRO_PATH_CURVE_TO = 2,
//     CAIRO_PATH_CLOSE_PATH = 3,
// }
// pub type cairo_path_data_type_t = _cairo_path_data_type;
// pub type cairo_path_data_t = _cairo_path_data_t;
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct _cairo_path_data_t {
//     pub _bindgen_data_: [u64; 2usize],
// }
// impl _cairo_path_data_t {
//     pub unsafe fn header(&mut self) -> *mut Struct_Unnamed42 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
//     pub unsafe fn point(&mut self) -> *mut Struct_Unnamed43 {
//         let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
//         ::std::mem::transmute(raw.offset(0))
//     }
// }
// impl ::std::default::Default for _cairo_path_data_t {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed42 {
//     pub type_: cairo_path_data_type_t,
//     pub length: ::std::os::raw::c_int,
// }
// impl ::std::default::Default for Struct_Unnamed42 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct Struct_Unnamed43 {
//     pub x: ::std::os::raw::c_double,
//     pub y: ::std::os::raw::c_double,
// }
// impl ::std::default::Default for Struct_Unnamed43 {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct cairo_path {
//     pub status: cairo_status_t,
//     pub data: *mut cairo_path_data_t,
//     pub num_data: ::std::os::raw::c_int,
//     _bindgen_padding_0_: [u8; 4usize],
// }
// impl ::std::default::Default for cairo_path {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type cairo_path_t = cairo_path;
// #[derive(Copy, Clone)]
// #[repr(i32)]
// #[derive(Debug)]
// pub enum _cairo_device_type {
//     CAIRO_DEVICE_TYPE_DRM = 0,
//     CAIRO_DEVICE_TYPE_GL = 1,
//     CAIRO_DEVICE_TYPE_SCRIPT = 2,
//     CAIRO_DEVICE_TYPE_XCB = 3,
//     CAIRO_DEVICE_TYPE_XLIB = 4,
//     CAIRO_DEVICE_TYPE_XML = 5,
//     CAIRO_DEVICE_TYPE_COGL = 6,
//     CAIRO_DEVICE_TYPE_WIN32 = 7,
//     CAIRO_DEVICE_TYPE_INVALID = -1,
// }
// pub type cairo_device_type_t = _cairo_device_type;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum cairo_surface_observer_mode_t {
//     CAIRO_SURFACE_OBSERVER_NORMAL = 0,
//     CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS = 1,
// }
// pub type cairo_surface_observer_callback_t =
//     ::std::option::Option<unsafe extern "C" fn(observer: *mut cairo_surface_t,
//                                                target: *mut cairo_surface_t,
//                                                data:
//                                                    *mut ::std::os::raw::c_void)>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_surface_type {
//     CAIRO_SURFACE_TYPE_IMAGE = 0,
//     CAIRO_SURFACE_TYPE_PDF = 1,
//     CAIRO_SURFACE_TYPE_PS = 2,
//     CAIRO_SURFACE_TYPE_XLIB = 3,
//     CAIRO_SURFACE_TYPE_XCB = 4,
//     CAIRO_SURFACE_TYPE_GLITZ = 5,
//     CAIRO_SURFACE_TYPE_QUARTZ = 6,
//     CAIRO_SURFACE_TYPE_WIN32 = 7,
//     CAIRO_SURFACE_TYPE_BEOS = 8,
//     CAIRO_SURFACE_TYPE_DIRECTFB = 9,
//     CAIRO_SURFACE_TYPE_SVG = 10,
//     CAIRO_SURFACE_TYPE_OS2 = 11,
//     CAIRO_SURFACE_TYPE_WIN32_PRINTING = 12,
//     CAIRO_SURFACE_TYPE_QUARTZ_IMAGE = 13,
//     CAIRO_SURFACE_TYPE_SCRIPT = 14,
//     CAIRO_SURFACE_TYPE_QT = 15,
//     CAIRO_SURFACE_TYPE_RECORDING = 16,
//     CAIRO_SURFACE_TYPE_VG = 17,
//     CAIRO_SURFACE_TYPE_GL = 18,
//     CAIRO_SURFACE_TYPE_DRM = 19,
//     CAIRO_SURFACE_TYPE_TEE = 20,
//     CAIRO_SURFACE_TYPE_XML = 21,
//     CAIRO_SURFACE_TYPE_SKIA = 22,
//     CAIRO_SURFACE_TYPE_SUBSURFACE = 23,
//     CAIRO_SURFACE_TYPE_COGL = 24,
// }
// pub type cairo_surface_type_t = _cairo_surface_type;
// pub type cairo_raster_source_acquire_func_t =
//     ::std::option::Option<unsafe extern "C" fn(pattern: *mut cairo_pattern_t,
//                                                callback_data:
//                                                    *mut ::std::os::raw::c_void,
//                                                target: *mut cairo_surface_t,
//                                                extents:
//                                                    *const cairo_rectangle_int_t)
//                               -> *mut cairo_surface_t>;
// pub type cairo_raster_source_release_func_t =
//     ::std::option::Option<unsafe extern "C" fn(pattern: *mut cairo_pattern_t,
//                                                callback_data:
//                                                    *mut ::std::os::raw::c_void,
//                                                surface:
//                                                    *mut cairo_surface_t)>;
// pub type cairo_raster_source_snapshot_func_t =
//     ::std::option::Option<unsafe extern "C" fn(pattern: *mut cairo_pattern_t,
//                                                callback_data:
//                                                    *mut ::std::os::raw::c_void)
//                               -> cairo_status_t>;
// pub type cairo_raster_source_copy_func_t =
//     ::std::option::Option<unsafe extern "C" fn(pattern: *mut cairo_pattern_t,
//                                                callback_data:
//                                                    *mut ::std::os::raw::c_void,
//                                                other: *const cairo_pattern_t)
//                               -> cairo_status_t>;
// pub type cairo_raster_source_finish_func_t =
//     ::std::option::Option<unsafe extern "C" fn(pattern: *mut cairo_pattern_t,
//                                                callback_data:
//                                                    *mut ::std::os::raw::c_void)>;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_pattern_type {
//     CAIRO_PATTERN_TYPE_SOLID = 0,
//     CAIRO_PATTERN_TYPE_SURFACE = 1,
//     CAIRO_PATTERN_TYPE_LINEAR = 2,
//     CAIRO_PATTERN_TYPE_RADIAL = 3,
//     CAIRO_PATTERN_TYPE_MESH = 4,
//     CAIRO_PATTERN_TYPE_RASTER_SOURCE = 5,
// }
// pub type cairo_pattern_type_t = _cairo_pattern_type;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_extend {
//     CAIRO_EXTEND_NONE = 0,
//     CAIRO_EXTEND_REPEAT = 1,
//     CAIRO_EXTEND_REFLECT = 2,
//     CAIRO_EXTEND_PAD = 3,
// }
// pub type cairo_extend_t = _cairo_extend;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_filter {
//     CAIRO_FILTER_FAST = 0,
//     CAIRO_FILTER_GOOD = 1,
//     CAIRO_FILTER_BEST = 2,
//     CAIRO_FILTER_NEAREST = 3,
//     CAIRO_FILTER_BILINEAR = 4,
//     CAIRO_FILTER_GAUSSIAN = 5,
// }
// pub type cairo_filter_t = _cairo_filter;
// pub enum _cairo_region { }
// pub type cairo_region_t = _cairo_region;
// #[derive(Copy, Clone)]
// #[repr(u32)]
// #[derive(Debug)]
// pub enum _cairo_region_overlap {
//     CAIRO_REGION_OVERLAP_IN = 0,
//     CAIRO_REGION_OVERLAP_OUT = 1,
//     CAIRO_REGION_OVERLAP_PART = 2,
// }
// pub type cairo_region_overlap_t = _cairo_region_overlap;
// pub enum _PangoCairoFont { }
// pub type PangoCairoFont = _PangoCairoFont;
// pub enum _PangoCairoFontMap { }
// pub type PangoCairoFontMap = _PangoCairoFontMap;
// pub type PangoCairoShapeRendererFunc =
//     ::std::option::Option<unsafe extern "C" fn(cr: *mut cairo_t,
//                                                attr: *mut PangoAttrShape,
//                                                do_path: gboolean,
//                                                data: gpointer)>;
// pub type __builtin_va_list = [__va_list_tag; 1usize];
// #[repr(C)]
// #[derive(Copy, Clone)]
// #[derive(Debug)]
// pub struct __va_list_tag {
//     pub gp_offset: ::std::os::raw::c_uint,
//     pub fp_offset: ::std::os::raw::c_uint,
//     pub overflow_arg_area: *mut ::std::os::raw::c_void,
//     pub reg_save_area: *mut ::std::os::raw::c_void,
// }
// impl ::std::default::Default for __va_list_tag {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// #[link(name = "pango", kind = "dylib")]
// extern "C" {
//     pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
//     pub static mut __daylight: ::std::os::raw::c_int;
//     pub static mut __timezone: ::std::os::raw::c_long;
//     pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
//     pub static mut daylight: ::std::os::raw::c_int;
//     pub static mut timezone: ::std::os::raw::c_long;
//     pub static mut _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
//     pub static mut sys_siglist: [*const ::std::os::raw::c_char; 65usize];
//     pub static mut g_mem_gc_friendly: gboolean;
//     pub static mut glib_mem_profiler_table: *mut GMemVTable;
//     pub static mut g_timeout_funcs: GSourceFuncs;
//     pub static mut g_child_watch_funcs: GSourceFuncs;
//     pub static mut g_idle_funcs: GSourceFuncs;
//     pub static mut g_unix_signal_funcs: GSourceFuncs;
//     pub static mut g_unix_fd_source_funcs: GSourceFuncs;
//     pub static g_utf8_skip: *const gchar;
//     pub static mut g_io_watch_funcs: GSourceFuncs;
//     pub static g_ascii_table: *const guint16;
//     pub static g_test_config_vars: *const GTestConfig;
//     pub static glib_major_version: guint;
//     pub static glib_minor_version: guint;
//     pub static glib_micro_version: guint;
//     pub static glib_interface_age: guint;
//     pub static glib_binary_age: guint;
//     pub static mut g_thread_functions_for_glib_use: GThreadFunctions;
//     pub static mut g_thread_use_default_impl: gboolean;
//     pub static mut g_thread_gettime:
//                ::std::option::Option<extern "C" fn() -> guint64>;
//     pub static mut g_threads_got_initialized: gboolean;
//     pub static mut g_param_spec_types: *mut GType;
//     pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
//     pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
//     pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
//     pub static mut stdin: *mut _IO_FILE;
//     pub static mut stdout: *mut _IO_FILE;
//     pub static mut stderr: *mut _IO_FILE;
//     pub static mut sys_nerr: ::std::os::raw::c_int;
//     pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
// }

extern "C" {
    pub fn pango_cairo_show_layout(cr: *mut cairo_t,
                                   layout: *mut PangoLayout);
    pub fn pango_cairo_create_layout(cr: *mut cairo_t) -> *mut PangoLayout;
    pub fn pango_cairo_update_layout(cr: *mut cairo_t,
                                     layout: *mut PangoLayout);
    // pub fn pango_cairo_font_map_get_type() -> GType;
    // pub fn pango_cairo_font_map_new() -> *mut PangoFontMap;
    // pub fn pango_cairo_font_map_new_for_font_type(fonttype: cairo_font_type_t) -> *mut PangoFontMap;
    // pub fn pango_cairo_font_map_get_default() -> *mut PangoFontMap;
    // pub fn pango_cairo_font_map_set_default(fontmap: *mut PangoCairoFontMap);
    // pub fn pango_cairo_font_map_get_font_type(fontmap: *mut PangoCairoFontMap)
    //                                           -> cairo_font_type_t;
    // pub fn pango_cairo_font_map_set_resolution(fontmap: *mut PangoCairoFontMap,
    //                                            dpi: ::std::os::raw::c_double);
    // pub fn pango_cairo_font_map_get_resolution(fontmap: *mut PangoCairoFontMap)
    //                                            -> ::std::os::raw::c_double;
    // pub fn pango_cairo_font_map_create_context(fontmap: *mut PangoCairoFontMap)
    //                                            -> *mut PangoContext;
    // pub fn pango_cairo_font_get_type() -> GType;
    // pub fn pango_cairo_font_get_scaled_font(font: *mut PangoCairoFont)
    //                                         -> *mut cairo_scaled_font_t;
    // pub fn pango_cairo_update_context(cr: *mut cairo_t,
    //                                   context: *mut PangoContext);
    // pub fn pango_cairo_context_set_font_options(context: *mut PangoContext,
    //                                             options: *const cairo_font_options_t);
    // pub fn pango_cairo_context_get_font_options(context: *mut PangoContext)
    //                                             -> *const cairo_font_options_t;
    // pub fn pango_cairo_context_set_resolution(context: *mut PangoContext,
    //                                           dpi: ::std::os::raw::c_double);
    // pub fn pango_cairo_context_get_resolution(context: *mut PangoContext)
    //                                           -> ::std::os::raw::c_double;
    // pub fn pango_cairo_context_set_shape_renderer(context: *mut PangoContext,
    //                                               func: PangoCairoShapeRendererFunc,
    //                                               data: gpointer,
    //                                               dnotify: GDestroyNotify);
    // pub fn pango_cairo_context_get_shape_renderer(context: *mut PangoContext,
    //                                               data: *mut gpointer)
    //                                               -> PangoCairoShapeRendererFunc;
    // pub fn pango_cairo_create_context(cr: *mut cairo_t) -> *mut PangoContext;
    // pub fn pango_cairo_show_glyph_string(cr: *mut cairo_t,
    //                                      font: *mut PangoFont,
    //                                      glyphs: *mut PangoGlyphString);
    // pub fn pango_cairo_show_glyph_item(cr: *mut cairo_t,
    //                                    text: *const ::std::os::raw::c_char,
    //                                    glyph_item: *mut PangoGlyphItem);
    // pub fn pango_cairo_show_layout_line(cr: *mut cairo_t,
    //                                     line: *mut PangoLayoutLine);
    // pub fn pango_cairo_show_error_underline(cr: *mut cairo_t,
    //                                         x: ::std::os::raw::c_double,
    //                                         y: ::std::os::raw::c_double,
    //                                         width: ::std::os::raw::c_double,
    //                                         height: ::std::os::raw::c_double);
    // pub fn pango_cairo_glyph_string_path(cr: *mut cairo_t,
    //                                      font: *mut PangoFont,
    //                                      glyphs: *mut PangoGlyphString);
    // pub fn pango_cairo_layout_line_path(cr: *mut cairo_t,
    //                                     line: *mut PangoLayoutLine);
    // pub fn pango_cairo_layout_path(cr: *mut cairo_t,
    //                                layout: *mut PangoLayout);
    // pub fn pango_cairo_error_underline_path(cr: *mut cairo_t,
    //                                         x: ::std::os::raw::c_double,
    //                                         y: ::std::os::raw::c_double,
    //                                         width: ::std::os::raw::c_double,
    //                                         height: ::std::os::raw::c_double);
}
